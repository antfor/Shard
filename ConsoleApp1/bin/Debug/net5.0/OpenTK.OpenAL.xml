<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTK.OpenAL</name>
    </assembly>
    <members>
        <member name="T:OpenTK.Audio.OpenAL.ALCaptureDevice">
            <summary>
            Handle to an OpenAL capture device.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALC">
            <summary>Alc = Audio Library Context.</summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32*)">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">A pointer to a device.</param>
            <param name="attributeList">A zero terminated array of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC.</param>
            <returns>Returns a pointer to the new context (NULL on failure).</returns>
            <remarks>The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</remarks>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32@)">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">A pointer to a device.</param>
            <param name="attributeList">A zero terminated array of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC.</param>
            <returns>Returns a pointer to the new context (NULL on failure).</returns>
            <remarks>The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</remarks>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32[])">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">A pointer to a device.</param>
            <param name="attributeList">A zero terminated array of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC.</param>
            <returns>Returns a pointer to the new context (NULL on failure).</returns>
            <remarks>The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</remarks>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Span{System.Int32})">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">A pointer to a device.</param>
            <param name="attributeList">A zero terminated span of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC.</param>
            <returns>Returns a pointer to the new context (NULL on failure).</returns>
            <remarks>The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</remarks>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">A pointer to a device.</param>
            <param name="attributes">The ALContext attributes to request.</param>
            <returns>Returns a pointer to the new context (NULL on failure).</returns>
            <remarks>The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</remarks>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.MakeContextCurrent(OpenTK.Audio.OpenAL.ALContext)">
            <summary>This function makes a specified context the current context.</summary>
            <param name="context">A pointer to the new context.</param>
            <returns>Returns True on success, or False on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.ProcessContext(OpenTK.Audio.OpenAL.ALContext)">
            <summary>This function tells a context to begin processing. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. alcSuspendContext can be used to suspend a context, and then all the OpenAL state changes can be applied at once, followed by a call to alcProcessContext to apply all the state changes immediately. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.</summary>
            <param name="context">A pointer to the new context.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.SuspendContext(OpenTK.Audio.OpenAL.ALContext)">
            <summary>This function suspends processing on a specified context. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. A typical use of alcSuspendContext would be to suspend a context, apply all the OpenAL state changes at once, and then call alcProcessContext to apply all the state changes at once. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.</summary>
            <param name="context">A pointer to the context to be suspended.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.DestroyContext(OpenTK.Audio.OpenAL.ALContext)">
            <summary>This function destroys a context.</summary>
            <param name="context">A pointer to the new context.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetCurrentContext">
            <summary>This function retrieves the current context.</summary>
            <returns>Returns a pointer to the current context.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetContextsDevice(OpenTK.Audio.OpenAL.ALContext)">
            <summary>This function retrieves a context's device pointer.</summary>
            <param name="context">A pointer to a context.</param>
            <returns>Returns a pointer to the specified context's device.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.OpenDevice(System.String)">
            <summary>This function opens a device by name.</summary>
            <param name="devicename">A null-terminated string describing a device.</param>
            <returns>Returns a pointer to the opened device. The return value will be NULL if there is an error.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CloseDevice(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>This function closes a device by name.</summary>
            <param name="device">A pointer to an opened device.</param>
            <returns>True will be returned on success or False on failure. Closing a device will fail if the device contains any contexts or buffers.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetError(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>This function retrieves the current context error state.</summary>
            <param name="device">A pointer to the device to retrieve the error state from.</param>
            <returns>Errorcode Int32.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice,System.String)">
            <summary>This function queries if a specified context extension is available.</summary>
            <param name="device">A pointer to the device to be queried for an extension.</param>
            <param name="extname">A null-terminated string describing the extension.</param>
            <returns>Returns True if the extension is available, False if the extension is not available.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice,System.String)">
            <summary>This function queries if a specified context extension is available.</summary>
            <param name="device">A pointer to the device to be queried for an extension.</param>
            <param name="extname">A null-terminated string describing the extension.</param>
            <returns>Returns True if the extension is available, False if the extension is not available.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetProcAddress(OpenTK.Audio.OpenAL.ALDevice,System.String)">
            <summary>This function retrieves the address of a specified context extension function.</summary>
            <param name="device">a pointer to the device to be queried for the function.</param>
            <param name="funcname">a null-terminated string describing the function.</param>
            <returns>Returns the address of the function, or NULL if it is not found.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetEnumValue(OpenTK.Audio.OpenAL.ALDevice,System.String)">
            <summary>This function retrieves the enum value for a specified enumeration name.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="enumname">a null terminated string describing the enum value.</param>
            <returns>Returns the enum value described by the enumName string. This is most often used for querying an enum value for an ALC extension.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetStringPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)">
            <summary>This strings related to the context.</summary>
            <remarks>
            ALC_DEFAULT_DEVICE_SPECIFIER will return the name of the default output device.
            ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER will return the name of the default capture device.
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="device">A pointer to the device to be queried.</param>
            <param name="param">An attribute to be retrieved: ALC_DEFAULT_DEVICE_SPECIFIER, ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER, ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_EXTENSIONS.</param>
            <returns>A string containing the name of the Device.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)">
            <summary>This strings related to the context.</summary>
            <remarks>
            ALC_DEFAULT_DEVICE_SPECIFIER will return the name of the default output device.
            ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER will return the name of the default capture device.
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="device">A pointer to the device to be queried.</param>
            <param name="param">An attribute to be retrieved: ALC_DEFAULT_DEVICE_SPECIFIER, ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER, ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_EXTENSIONS.</param>
            <returns>A string containing the name of the Device.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetStringList)">
            <summary>This function returns a List of strings related to the context.</summary>
            <remarks>
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="device">A pointer to the device to be queried.</param>
            <param name="param">An attribute to be retrieved: ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_ALL_DEVICES_SPECIFIER.</param>
            <returns>A List of strings containing the names of the Devices.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.AlcGetStringList)">
            <summary>This function returns a List of strings related to the context.</summary>
            <remarks>
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="param">An attribute to be retrieved: ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_ALL_DEVICES_SPECIFIER.</param>
            <returns>A List of strings containing the names of the Devices.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.</param>
            <param name="size">the size of the destination buffer provided, in number of integers.</param>
            <param name="data">a pointer to the buffer to be returned.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.</param>
            <param name="size">the size of the destination buffer provided, in number of integers.</param>
            <param name="data">a pointer to the buffer to be returned.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">A pointer to the device to be queried.</param>
            <param name="param">An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.</param>
            <param name="size">The size of the destination buffer provided, in number of integers.</param>
            <param name="data">A pointer to the buffer to be returned.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32@)">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">A pointer to the device to be queried.</param>
            <param name="param">An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.</param>
            <param name="data">A pointer to the buffer to be returned.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger)">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">A pointer to the device to be queried.</param>
            <param name="param">An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.</param>
            <returns>The value returned.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetAttributeArray(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Returns a list of attributes for the current context of the specified device.
            </summary>
            <param name="device">The device to get attributes from.</param>
            <returns>A list of attributes for the device.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetContextAttributes(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Returns a list of attributes for the current context of the specified device.
            </summary>
            <param name="device">The device to get attributes from.</param>
            <returns>A list of attributes for the device.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Checks to see that the ALC_EXT_CAPTURE extension is present. This will always be available in 1.1 devices or later.
            </summary>
            <param name="device">The device to check the extension is present for.</param>
            <returns>If the ALC_EXT_CAPTURE extension was present.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)">
            <summary>
            Checks to see that the ALC_EXT_CAPTURE extension is present. This will always be available in 1.1 devices or later.
            </summary>
            <param name="device">The device to check the extension is present for.</param>
            <returns>If the ALC_EXT_CAPTURE extension was present.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(System.String,System.UInt32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)">
            <summary>This function opens a capture device by name. </summary>
            <param name="devicename">A pointer to a device name string.</param>
            <param name="frequency">The frequency that the buffer should be captured at.</param>
            <param name="format">The requested capture buffer format.</param>
            <param name="buffersize">The size of the capture buffer in samples, not bytes.</param>
            <returns>Returns the capture device pointer, or <see cref="F:OpenTK.Audio.OpenAL.ALCaptureDevice.Null"/> on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(System.String,System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)">
            <summary>This function opens a capture device by name. </summary>
            <param name="devicename">A pointer to a device name string.</param>
            <param name="frequency">The frequency that the buffer should be captured at.</param>
            <param name="format">The requested capture buffer format.</param>
            <param name="buffersize">The size of the capture buffer in samples, not bytes.</param>
            <returns>Returns the capture device pointer, or <see cref="F:OpenTK.Audio.OpenAL.ALCaptureDevice.Null"/> on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureCloseDevice(OpenTK.Audio.OpenAL.ALCaptureDevice)">
            <summary>This function closes the specified capture device.</summary>
            <param name="device">A pointer to a capture device.</param>
            <returns>Returns True if the close operation was successful, False on failure.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureStart(OpenTK.Audio.OpenAL.ALCaptureDevice)">
            <summary>This function begins a capture operation.</summary>
            <remarks>alcCaptureStart will begin recording to an internal ring buffer of the size specified when opening the capture device. The application can then retrieve the number of samples currently available using the ALC_CAPTURE_SAPMPLES token with alcGetIntegerv. When the application determines that enough samples are available for processing, then it can obtain them with a call to alcCaptureSamples.</remarks>
            <param name="device">A pointer to a capture device.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureStop(OpenTK.Audio.OpenAL.ALCaptureDevice)">
            <summary>This function stops a capture operation.</summary>
            <param name="device">A pointer to a capture device.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.IntPtr,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">A pointer to a capture device.</param>
            <param name="buffer">A pointer to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">The number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Void*,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">A pointer to a capture device.</param>
            <param name="buffer">A pointer to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">The number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Byte@,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">A pointer to a capture device.</param>
            <param name="buffer">A pointer to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">The number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Int16@,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">A pointer to a capture device.</param>
            <param name="buffer">A pointer to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">The number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0@,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <typeparam name="T">The buffer datatype.</typeparam>
            <param name="device">A pointer to a capture device.</param>
            <param name="buffer">A reference to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">The number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0[],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <typeparam name="T">The buffer datatype.</typeparam>
            <param name="device">A pointer to a capture device.</param>
            <param name="buffer">A buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">The number of samples to be retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">A pointer to the device to be queried.</param>
            <param name="param">An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.</param>
            <param name="size">The size of the destination buffer provided, in number of integers.</param>
            <param name="data">A pointer to the buffer to be returned.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">A pointer to the device to be queried.</param>
            <param name="param">An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.</param>
            <param name="size">The size of the destination buffer provided, in number of integers.</param>
            <param name="data">A pointer to the buffer to be returned.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">A pointer to the device to be queried.</param>
            <param name="param">An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.</param>
            <param name="size">The size of the destination buffer provided, in number of integers.</param>
            <param name="data">A pointer to the buffer to be returned.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetAvailableSamples(OpenTK.Audio.OpenAL.ALCaptureDevice)">
            <summary>
            Gets the current number of available capture samples.
            </summary>
            <param name="device">The device.</param>
            <returns>The number of capture samples available.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Checks to see that the ALC_ENUMERATION_EXT extension is present. This will always be available in 1.1 devices or later.
            </summary>
            <param name="device">The device to check the extension is present for.</param>
            <returns>If the ALC_ENUMERATION_EXT extension was present.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)">
            <summary>
            Checks to see that the ALC_ENUMERATION_EXT extension is present. This will always be available in 1.1 devices or later.
            </summary>
            <param name="device">The device to check the extension is present for.</param>
            <returns>If the ALC_ENUMERATION_EXT extension was present.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationString)">
            <summary>
            Gets a named property on the context.
            </summary>
            <param name="device">The device for the context.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetStringListPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationStringList)">
            <summary>
            Gets a named property on the context.
            </summary>
            <param name="device">The device for the context.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.GetStringList(OpenTK.Audio.OpenAL.GetEnumerationStringList)">
            <inheritdoc cref="M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationString)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALC.ALStringListToList(System.Byte*)">
            <summary>
            Used to convert a OpenAL string list to a C# List.
            </summary>
            <param name="alList">A pointer to the AL list. Usually returned from GetStringList like AL functions.</param>
            <returns>The string list.</returns>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcContextAttributes">
            <summary>
            Defines available context attributes.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.Frequency">
            <summary>Followed by System.Int32 Hz</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.Refresh">
            <summary>Followed by System.Int32 Hz</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.Sync">
            <summary>Followed by AlBoolean.True, or AlBoolean.False</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.MonoSources">
            <summary>Followed by System.Int32 Num of requested Mono (3D) Sources</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.StereoSources">
            <summary>Followed by System.Int32 Num of requested Stereo Sources</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcContextAttributes.EfxMaxAuxiliarySends">
            <summary>(EFX Extension) This Context property can be passed to OpenAL during Context creation (alcCreateContext) to request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired number of sends will be available, so an application should query this property after creating the context using alcGetIntergerv. Default: 2</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcError">
            <summary>
            Defines OpenAL context errors.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.NoError">
            <summary>There is no current error.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.InvalidDevice">
            <summary>No Device. The device handle or specifier names an inaccessible driver/server.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.InvalidContext">
            <summary>Invalid context ID. The Context argument does not name a valid context.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.InvalidEnum">
            <summary>Bad enum. A token used is not valid, or not applicable.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.InvalidValue">
            <summary>Bad value. A value (e.g. Attribute) is not valid, or not applicable.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcError.OutOfMemory">
            <summary>Out of memory. Unable to allocate memory.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcGetString">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)"/>.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.DefaultDeviceSpecifier">
            <summary>The specifier string for the default device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.Extensions">
            <summary>A list of available context extensions separated by spaces.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.CaptureDefaultDeviceSpecifier">
            <summary>The name of the default capture device</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.DefaultAllDevicesSpecifier">
            <summary>a list of the default devices.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.CaptureDeviceSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.CaptureDeviceSpecifier. ALC_EXT_CAPTURE_EXT </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.DeviceSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.DeviceSpecifier</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetString.AllDevicesSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.AllDevicesSpecifier</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcGetStringList">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetStringList)"/>.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetStringList.CaptureDeviceSpecifier">
            <summary>The name of the specified capture device, or a list of all available capture devices if no capture device is specified. ALC_EXT_CAPTURE_EXT </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetStringList.DeviceSpecifier">
            <summary>The specifier strings for all available devices. ALC_ENUMERATION_EXT</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetStringList.AllDevicesSpecifier">
            <summary>The specifier strings for all available devices. ALC_ENUMERATE_ALL_EXT</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AlcGetInteger">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])"/>.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.MajorVersion">
            <summary>The specification revision for this implementation (major version). NULL is an acceptable device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.MinorVersion">
            <summary>The specification revision for this implementation (minor version). NULL is an acceptable device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.AttributesSize">
            <summary>The size (number of ALCint values) required for a zero-terminated attributes list, for the current context. NULL is an invalid device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.AllAttributes">
            <summary>Expects a destination of ALC_ATTRIBUTES_SIZE, and provides an attribute list for the current context of the specified device. NULL is an invalid device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.CaptureSamples">
            <summary>The number of capture samples available. NULL is an invalid device.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.EfxMajorVersion">
            <summary>(EFX Extension) This property can be used by the application to retrieve the Major version number of the Effects Extension supported by this OpenAL implementation. As this is a Context property is should be retrieved using alcGetIntegerv.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.EfxMinorVersion">
            <summary>(EFX Extension) This property can be used by the application to retrieve the Minor version number of the Effects Extension supported by this OpenAL implementation. As this is a Context property is should be retrieved using alcGetIntegerv.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.AlcGetInteger.EfxMaxAuxiliarySends">
            <summary>(EFX Extension) This Context property can be passed to OpenAL during Context creation (alcCreateContext) to request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired number of sends will be available, so an application should query this property after creating the context using alcGetIntergerv. Default: 2</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.GetEnumerationString">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationString)" />.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.GetEnumerationString.DefaultDeviceSpecifier">
            <summary>
            Gets the specifier for the default device. ALC_ENUMERATION_EXT
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.GetEnumerationString.DeviceSpecifier">
            <summary>
            Gets a specific output device's specifier.
            Can also be used without a device to get a list of all available output devices, see <see cref="F:OpenTK.Audio.OpenAL.GetEnumerationStringList.DeviceSpecifier"/>. ALC_ENUMERATION_EXT
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.GetEnumerationString.DefaultCaptureDeviceSpecifier">
            <summary>
            Gets the specifier for the default capture device. ALC_ENUMERATION_EXT
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.GetEnumerationString.CaptureDeviceSpecifier">
            <summary>
            Gets a specific capture device's specifier.
            Can also be used without a device to get a list of all available capture devices, see <see cref="F:OpenTK.Audio.OpenAL.GetEnumerationStringList.CaptureDeviceSpecifier"/>. ALC_ENUMERATION_EXT
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.GetEnumerationStringList">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.ALC.GetStringListPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationStringList)" />.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.GetEnumerationStringList.DeviceSpecifier">
            <summary>
            Gets the specifier strings for all available output devices.
            Can also be used to get the specifier for a specific device, see <see cref="F:OpenTK.Audio.OpenAL.GetEnumerationString.DeviceSpecifier"/>. ALC_ENUMERATION_EXT
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.GetEnumerationStringList.CaptureDeviceSpecifier">
            <summary>
            Gets the specifier strings for all available capture devices.
            Can also be used to get the specifier for a specific capture device, see <see cref="F:OpenTK.Audio.OpenAL.GetEnumerationString.DeviceSpecifier"/>. ALC_ENUMERATION_EXT
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALContextAttributes">
            <summary>
            Convenience class for handling ALContext attributes.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.ALContextAttributes.Frequency">
            <summary>
            Gets or sets the output buffer frequency in Hz.
            This does not actually change any AL state. To apply these attributes see <see cref="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.ALContextAttributes.MonoSources">
            <summary>
            Gets or sets the number of mono sources.
            This does not actually change any AL state. To apply these attributes see <see cref="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)"/>.
            Not guaranteed to get exact number of mono sources when creating a context.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.ALContextAttributes.StereoSources">
            <summary>
            Gets or sets the number of stereo sources.
            This does not actually change any AL state. To apply these attributes see <see cref="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)"/>.
            Not guaranteed to get exact number of mono sources when creating a context.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.ALContextAttributes.Refresh">
            <summary>
            Gets or sets the refrash interval in Hz.
            This does not actually change any AL state. To apply these attributes see <see cref="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.ALContextAttributes.Sync">
            <summary>
            Gets or sets if the context is synchronous.
            This does not actually change any AL state. To apply these attributes see <see cref="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.ALContextAttributes.AdditionalAttributes">
            <summary>
            Gets or sets additional attributes.
            Will usually be the major and minor version numbers of the context. // FIXME: This needs verification. Docs say nothing about this.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALContextAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Audio.OpenAL.ALContextAttributes"/> class.
            Leaving all attributes to the driver implementation default values.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALContextAttributes.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Audio.OpenAL.ALContextAttributes"/> class.
            </summary>
            <param name="frequency">The mixing output buffer frequency in Hz.</param>
            <param name="monoSources">The number of mono sources available. Not guaranteed.</param>
            <param name="stereoSources">The number of stereo sources available. Not guaranteed.</param>
            <param name="refresh">The refresh interval in Hz.</param>
            <param name="sync">If the context is synchronous.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALContextAttributes.CreateAttributeArray">
            <summary>
            Converts these context attributes to a <see cref="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32[])"/> compatible list.
            Alternativly, consider using the more convenient <see cref="M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)"/> overload.
            </summary>
            <returns>The attibute list in the form of a span.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALContextAttributes.FromArray(System.Int32[])">
            <summary>
            Parses a AL attribute list.
            </summary>
            <param name="attributeArray">The AL context attribute list.</param>
            <returns>The parsed <see cref="T:OpenTK.Audio.OpenAL.AlcContextAttributes"/> object.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALContextAttributes.ToString">
            <summary>
            Converts the attributes to a string representation.
            </summary>
            <returns>The string representation of the attributes.</returns>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALDevice">
            <summary>
            Opaque handle to an OpenAL device.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.AL">
            <summary>
            Provides access to the OpenAL 1.1 flat API.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Enable(OpenTK.Audio.OpenAL.ALCapability)">
            <summary>This function enables a feature of the OpenAL driver. There are no capabilities defined in OpenAL 1.1 to be used with this function, but it may be used by an extension.</summary>
            <param name="capability">The name of a capability to enable.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Disable(OpenTK.Audio.OpenAL.ALCapability)">
            <summary>This function disables a feature of the OpenAL driver.</summary>
            <param name="capability">The name of a capability to disable.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsEnabled(OpenTK.Audio.OpenAL.ALCapability)">
            <summary>This function returns a boolean indicating if a specific feature is enabled in the OpenAL driver.</summary>
            <param name="capability">The name of a capability to enable.</param>
            <returns>True if enabled, False if disabled.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetString)">
            <summary>This function retrieves an OpenAL string property.</summary>
            <param name="param">The property to be returned: Vendor, Version, Renderer and Extensions.</param>
            <returns>Returns a pointer to a null-terminated string.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetErrorString(OpenTK.Audio.OpenAL.ALError)">
            <summary>This function retrieves an OpenAL string property.</summary>
            <param name="param">The human-readable errorstring to be returned.</param>
            <returns>Returns a pointer to a null-terminated string.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetInteger)">
            <summary>This function returns an integer OpenAL state.</summary>
            <param name="param">the state to be queried: DistanceModel.</param>
            <returns>The integer state described by param will be returned.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetFloat)">
            <summary>This function returns a floating-point OpenAL state.</summary>
            <param name="param">the state to be queried: DopplerFactor, SpeedOfSound.</param>
            <returns>The floating-point state described by param will be returned.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetError">
            <summary>Error support. Obtain the most recent error generated in the AL state machine. When an error is detected by AL, a flag is set and the error code is recorded. Further errors, if they occur, do not affect this recorded code. When alGetError is called, the code is returned and the flag is cleared, so that a further error will again record its code.</summary>
            <returns>The first error that occured. can be used with AL.GetString. Returns an Alenum representing the error state. When an OpenAL error occurs, the error state is set and will not be changed until the error state is retrieved using alGetError. Whenever alGetError is called, the error state is cleared and the last state (the current state when the call was made) is returned. To isolate error detection to a specific portion of code, alGetError should be called before the isolated section to clear the current error state.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsExtensionPresent(System.String)">
            <summary>This function tests if a specific Extension is available for the OpenAL driver.</summary>
            <param name="extname">A string naming the desired extension. Example: "EAX-RAM".</param>
            <returns>Returns True if the Extension is available or False if not available.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetProcAddress(System.String)">
            <summary>This function returns the address of an OpenAL extension function. Handle with care.</summary>
            <param name="fname">A string containing the function name.</param>
            <returns>The return value is a pointer to the specified function. The return value will be IntPtr.Zero if the function is not found.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetEnumValue(System.String)">
            <summary>This function returns the enumeration value of an OpenAL token, described by a string.</summary>
            <param name="ename">A string describing an OpenAL token. Example "AL_DISTANCE_MODEL".</param>
            <returns>Returns the actual ALenum described by a string. Returns 0 if the string doesn’t describe a valid OpenAL token.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerf,System.Single)">
            <summary>This function sets a floating-point property for the listener.</summary>
            <param name="param">The name of the attribute to be set.</param>
            <param name="value">The float value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a floating-point property for the listener.</summary>
            <param name="param">The name of the attribute to set.</param>
            <param name="value1">The first value to set the attribute to.</param>
            <param name="value2">The second value to set the attribute to.</param>
            <param name="value3">The third value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)">
            <summary>This function sets a Math.Vector3 property for the listener.</summary>
            <param name="param">The name of the attribute to set.</param>
            <param name="values">The Math.Vector3 to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)">
            <summary>This function sets a floating-point vector property of the listener.</summary>
            <param name="param">The name of the attribute to be set.</param>
            <param name="values">Pointer to floating-point vector values.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)">
            <summary>This function sets a floating-point vector property of the listener.</summary>
            <param name="param">The name of the attribute to be set.</param>
            <param name="values">Pointer to floating-point vector values.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])">
            <summary>This function sets a floating-point vector property of the listener.</summary>
            <param name="param">The name of the attribute to be set.</param>
            <param name="values">Pointer to floating-point vector values.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)">
            <summary>This function sets two Math.Vector3 properties of the listener.</summary>
            <param name="param">The name of the attribute to be set.</param>
            <param name="at">A Math.Vector3 for the At-Vector.</param>
            <param name="up">A Math.Vector3 for the Up-Vector.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf,System.Single@)">
            <summary>This function retrieves a floating-point property of the listener.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListenerf.Gain.</param>
            <param name="value">a pointer to the floating-point value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves a set of three floating-point values from a property of the listener.</summary>
            <param name="param">The name of the attribute to be retrieved.</param>
            <param name="value1">The first floating-point value being retrieved.</param>
            <param name="value2">The second floating-point value  being retrieved.</param>
            <param name="value3">The third floating-point value  being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)">
            <summary>This function retrieves a Math.Vector3 from a property of the listener.</summary>
            <param name="param">The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity.</param>
            <param name="values">A Math.Vector3 to hold the three floats being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)">
            <summary>This function retrieves a floating-point vector property of the listener. You must pin it manually.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation.</param>
            <param name="values">A pointer to the floating-point vector value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)">
            <summary>This function retrieves a floating-point vector property of the listener. You must pin it manually.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation.</param>
            <param name="values">A pointer to the floating-point vector value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])">
            <summary>This function retrieves a floating-point vector property of the listener. You must pin it manually.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation.</param>
            <param name="values">A pointer to the floating-point vector value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)">
            <summary>This function retrieves two Math.Vector3 properties of the listener.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListenerfv.Orientation.</param>
            <param name="at">A Math.Vector3 for the At-Vector.</param>
            <param name="up">A Math.Vector3 for the Up-Vector.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32*)">
            <summary>This function generates one or more sources.</summary>
            <param name="n">The number of sources to be generated.</param>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32@)">
            <summary>This function generates one or more sources.</summary>
            <param name="n">The number of sources to be generated.</param>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32[])">
            <summary>This function generates one or more sources.</summary>
            <param name="n">The number of sources to be generated.</param>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32[])">
            <summary>This function generates one or more sources.</summary>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Span{System.Int32})">
            <summary>This function generates one or more sources.</summary>
            <param name="sources">Span of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32)">
            <summary>This function generates one or more sources.</summary>
            <param name="n">The number of sources to be generated.</param>
            <returns>Pointer to an array of int values which will store the names of the new sources.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSource">
            <summary>This function generates one source only.</summary>
            <returns>Pointer to an int value which will store the name of the new source.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenSource(System.Int32@)">
            <summary>This function generates one source only.</summary>
            <param name="source">Pointer to an int value which will store the name of the new source.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32*)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Pointer to an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32@)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Reference to a single source, or an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32[])">
            <summary>This function deletes one or more sources.</summary>
            <param name="sources">An array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.ReadOnlySpan{System.Int32})">
            <summary>This function deletes one or more sources.</summary>
            <param name="sources">An array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteSource(System.Int32)">
            <summary>This function deletes one source only.</summary>
            <param name="source">Pointer to a source name identifying the source to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsSource(System.Int32)">
            <summary>This function tests if a source name is valid, returning True if valid and False if not.</summary>
            <param name="sid">A source name to be tested for validity.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single)">
            <summary>This function sets a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, SecOffset, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">The first ALfloat value which the attribute will be set to.</param>
            <param name="value2">The second ALfloat value which the attribute will be set to.</param>
            <param name="value3">The third ALfloat value which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 which the attribute will be set to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcei,System.Int32)">
            <summary>This function sets an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean)">
            <summary>This function sets an bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BindBufferToSource(System.Int32,System.Int32)">
            <summary>(Helper) Binds a Buffer to a Source handle.</summary>
            <param name="source">Source name to attach the Buffer to.</param>
            <param name="buffer">Buffer name which is attached to the Source.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32,System.Int32,System.Int32)">
            <summary>This function sets 3 integer properties of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: EfxAuxiliarySendFilter..</param>
            <param name="value1">The first value to set the attribute to.</param>
            <param name="value2">The second value to set the attribute to.</param>
            <param name="value3">The third value to set the attribute to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single@)">
            <summary>This function retrieves a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, SecOffset, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">A pointer to the floating-point value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">Pointer to the first value to retrieve.</param>
            <param name="value2">Pointer to the second value to retrieve.</param>
            <param name="value3">Pointer to the third value to retrieve.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 to retrieve the values to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32@,System.Int32@,System.Int32@)">
            <summary>This function retrieves three integer-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">Pointer to the first value to retrieve.</param>
            <param name="value2">Pointer to the second value to retrieve.</param>
            <param name="value3">Pointer to the third value to retrieve.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,OpenTK.Mathematics.Vector3i@)">
            <summary>This function retrieves three integer-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3i to retrieve the values to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei,System.Int32@)">
            <summary>This function retrieves an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.</param>
            <param name="value">A pointer to the integer value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean@)">
            <summary>This function retrieves a bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to get: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">A pointer to the bool value being retrieved.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32*)">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32@)">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32[])">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.ReadOnlySpan{System.Int32})">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="sources">The sources to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32*)">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32@)">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32[])">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.ReadOnlySpan{System.Int32})">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="sources">The sources to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32*)">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32@)">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32[])">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.ReadOnlySpan{System.Int32})">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="sources">The sources to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32*)">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32@)">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32[])">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.ReadOnlySpan{System.Int32})">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="sources">The sources to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32)">
            <summary>This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="sid">The name of the source to be played.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32)">
            <summary>This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.</summary>
            <param name="sid">The name of the source to be stopped.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32)">
            <summary>This function stops the source and sets its state to ALSourceState.Initial.</summary>
            <param name="sid">The name of the source to be rewound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32)">
            <summary>This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.</summary>
            <param name="sid">The name of the source to be paused.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32*)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32[])">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32@)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.ReadOnlySpan{System.Int32})">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="buffers">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffer(System.Int32,System.Int32)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="source">The name of the source to queue buffers onto.</param>
            <param name="buffer">The name of the buffer to be queued.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32*)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32[])">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32@)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32[])">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="bids">Array to fill with buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Span{System.Int32})">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="bids">Span to fill with buffer names that were removed.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer(System.Int32)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <returns>The unqueued buffer.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <returns>The unqueued buffers.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32*)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32@)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of int values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32[])">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of int values which will store the names of the new buffers.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Span{System.Int32})">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData).</summary>
            <param name="buffers">Span to fill with generated buffer names.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)">
            <summary>This function generates one or more buffers, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <returns>Pointer to an array of uint values which will store the names of the new buffers.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffer">
            <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <returns>Pointer to an uint value which will store the name of the new buffer.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GenBuffer(System.Int32@)">
            <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="buffer">Pointer to an uint value which will store the names of the new buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32*)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32@)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32[])">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32[])">
            <summary>This function deletes an array of buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffers">An array of buffer names to delete.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.ReadOnlySpan{System.Int32})">
            <summary>This function deletes a span of buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffers">Span of buffer names to delete.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DeleteBuffer(System.Int32)">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffer">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.IsBuffer(System.Int32)">
            <summary>This function tests if a buffer name is valid, returning True if valid, False if not.</summary>
            <param name="bid">A buffer Handle previously allocated with <see cref="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)"/>.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.IntPtr,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Void*,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Byte@,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int16@,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="bytes">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,``0[],System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <typeparam name="TBuffer">The type of the data buffer.</typeparam>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">The audio buffer.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.ReadOnlySpan{``0},System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <typeparam name="TBuffer">The type of the buffer elements.</typeparam>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Span representing the audio buffer.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi,System.Int32@)">
            <summary>This function retrieves an integer property of a buffer.</summary>
            <param name="bid">Buffer name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).</param>
            <param name="value">A pointer to an int to hold the retrieved buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DopplerFactor(System.Single)">
            <summary>AL.DopplerFactor is a simple scaling of source and listener velocities to exaggerate or deemphasize the Doppler (pitch) shift resulting from the calculation.</summary>
            <param name="value">A negative value will result in an error, the command is then ignored. The default value is 1f. The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DopplerVelocity(System.Single)">
            <summary>This function is deprecated and should not be used.</summary>
            <param name="value">The default is 1.0f.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.SpeedOfSound(System.Single)">
            <summary>AL.SpeedOfSound allows the application to change the reference (propagation) speed used in the Doppler calculation. The source and listener velocities should be expressed in the same units as the speed of sound.</summary>
            <param name="value">A negative or zero value will result in an error, and the command is ignored. Default: 343.3f (appropriate for velocity units of meters and air as the propagation medium). The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.DistanceModel(OpenTK.Audio.OpenAL.ALDistanceModel)">
             <summary>This function selects the OpenAL distance model – ALDistanceModel.InverseDistance, ALDistanceModel.InverseDistanceClamped, ALDistanceModel.LinearDistance, ALDistanceModel.LinearDistanceClamped, ALDistanceModel.ExponentDistance, ALDistanceModel.ExponentDistanceClamped, or ALDistanceModel.None. The default distance model in OpenAL is ALDistanceModel.InverseDistanceClamped.</summary>
             <remarks>
             The ALDistanceModel .InverseDistance model works according to the following formula:
             gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            
             The ALDistanceModel .InverseDistanceClamped model works according to the following formula:
             distance = max(distance,ALSourcef.ReferenceDistance);
             distance = min(distance,ALSourcef.MaxDistance);
             gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            
             The ALDistanceModel.LinearDistance model works according to the following formula:
             distance = min(distance, ALSourcef.MaxDistance) // avoid negative gain
             gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            
             The ALDistanceModel.LinearDistanceClamped model works according to the following formula:
             distance = max(distance, ALSourcef.ReferenceDistance)
             distance = min(distance, ALSourcef.MaxDistance)
             gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            
             The ALDistanceModel.ExponentDistance model works according to the following formula:
             gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor)
            
             The ALDistanceModel.ExponentDistanceClamped model works according to the following formula:
             distance = max(distance, ALSourcef.ReferenceDistance)
             distance = min(distance, ALSourcef.MaxDistance)
             gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor)
            
             The ALDistanceModel.None model works according to the following formula:
             <code>gain = 1f;</code>.
             </remarks>
             <param name="distancemodel">The distance model to use.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetDistanceModel">
            <summary>
            Returns the <see cref="T:OpenTK.Audio.OpenAL.ALDistanceModel"/> of the current context.
            </summary>
            <returns>The <see cref="T:OpenTK.Audio.OpenAL.ALDistanceModel"/> of the current context.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSourceState(System.Int32)">
            <summary>(Helper) Returns Source state information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>state information from OpenAL.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.AL.GetSourceType(System.Int32)">
            <summary>(Helper) Returns Source type information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>type information from OpenAL.</returns>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALCapability">
            <summary>A list of valid Enable/Disable/IsEnabled parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALCapability.Invalid">
            <summary>Currently no state toggles exist for vanilla OpenAL and no Extension uses it.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALListenerf">
            <summary>A list of valid 32-bit Float Listener/GetListener parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListenerf.Gain">
            <summary>Indicate the gain (Volume amplification) applied. Type: float Range: [0.0f - ? ] A value of 1.0 means un-attenuated/unchanged. Each division by 2 equals an attenuation of -6dB. Each multiplicaton with 2 equals an amplification of +6dB. A value of 0.0f is interpreted as zero volume and the channel is effectively disabled.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListenerf.EfxMetersPerUnit">
            <summary>(EFX Extension) This setting is critical if Air Absorption effects are enabled because the amount of Air Absorption applied is directly related to the real-world distance between the Source and the Listener. centimeters 0.01f meters 1.0f kilometers 1000.0f Range [float.MinValue .. float.MaxValue] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALListener3f">
            <summary>A list of valid Math.Vector3 Listener/GetListener parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListener3f.Position">
            <summary>Specify the current location in three dimensional space. OpenAL, like OpenGL, uses a right handed coordinate system, where in a frontal default view X (thumb) points right, Y points up (index finger), and Z points towards the viewer/camera (middle finger). To switch from a left handed coordinate system, flip the sign on the Z coordinate. Listener position is always in the world coordinate system.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListener3f.Velocity">
            <summary>Specify the current velocity in three dimensional space.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALListenerfv">
            <summary>A list of valid float[] Listener/GetListener parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALListenerfv.Orientation">
            <summary>Indicate Listener orientation. Expects two Vector3, At followed by Up.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourcef">
            <summary>A list of valid 32-bit Float Source/GetSource parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.ReferenceDistance">
            <summary>Source specific reference distance. Type: float Range: [0.0f - float.PositiveInfinity] At 0.0f, no distance attenuation occurs. Type: float Default: 1.0f.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.MaxDistance">
            <summary>Indicate distance above which Sources are not attenuated using the inverse clamped distance model. Default: float.PositiveInfinity Type: float Range: [0.0f - float.PositiveInfinity]</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.RolloffFactor">
            <summary>Source specific rolloff factor. Type: float Range: [0.0f - float.PositiveInfinity]</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.Pitch">
            <summary>Specify the pitch to be applied, either at Source, or on mixer results, at Listener. Range: [0.5f - 2.0f] Default: 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.Gain">
            <summary>Indicate the gain (volume amplification) applied. Type: float. Range: [0.0f - ? ] A value of 1.0 means un-attenuated/unchanged. Each division by 2 equals an attenuation of -6dB. Each multiplicaton with 2 equals an amplification of +6dB. A value of 0.0f is meaningless with respect to a logarithmic scale; it is interpreted as zero volume - the channel is effectively disabled.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.MinGain">
            <summary>Indicate minimum Source attenuation. Type: float Range: [0.0f - 1.0f] (Logarthmic)</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.MaxGain">
            <summary>Indicate maximum Source attenuation. Type: float Range: [0.0f - 1.0f] (Logarthmic)</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.ConeInnerAngle">
            <summary>Directional Source, inner cone angle, in degrees. Range: [0-360] Default: 360</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.ConeOuterAngle">
            <summary>Directional Source, outer cone angle, in degrees. Range: [0-360] Default: 360</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.ConeOuterGain">
            <summary>Directional Source, outer cone gain. Default: 0.0f Range: [0.0f - 1.0] (Logarithmic)</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.SecOffset">
            <summary>The playback position, expressed in seconds.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.EfxAirAbsorptionFactor">
            <summary>(EFX Extension) This property is a multiplier on the amount of Air Absorption applied to the Source. The AL_AIR_ABSORPTION_FACTOR is multiplied by an internal Air Absorption Gain HF value of 0.994 (-0.05dB) per meter which represents normal atmospheric humidity and temperature. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.EfxRoomRolloffFactor">
            <summary>(EFX Extension) This property is defined the same way as the Reverb Room Rolloff property: it is one of two methods available in the Effect Extension to attenuate the reflected sound (early reflections and reverberation) according to source-listener distance. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcef.EfxConeOuterGainHighFrequency">
            <summary>(EFX Extension) A directed Source points in a specified direction. The Source sounds at full volume when the listener is directly in front of the source; it is attenuated as the listener circles the Source away from the front. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSource3f">
            <summary>A list of valid Math.Vector3 Source/GetSource parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3f.Position">
            <summary>Specify the current location in three dimensional space. OpenAL, like OpenGL, uses a right handed coordinate system, where in a frontal default view X (thumb) points right, Y points up (index finger), and Z points towards the viewer/camera (middle finger). To switch from a left handed coordinate system, flip the sign on the Z coordinate. Listener position is always in the world coordinate system.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3f.Velocity">
            <summary>Specify the current velocity in three dimensional space.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3f.Direction">
            <summary>Specify the current direction vector.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourceb">
            <summary>A list of valid 8-bit boolean Source/GetSource parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.SourceRelative">
            <summary>Indicate that the Source has relative coordinates. Type: bool Range: [True, False]</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.Looping">
            <summary>Indicate whether the Source is looping. Type: bool Range: [True, False] Default: False.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.EfxDirectFilterGainHighFrequencyAuto">
            <summary>(EFX Extension) If this Source property is set to True, this Source’s direct-path is automatically filtered according to the orientation of the source relative to the listener and the setting of the Source property Sourcef.ConeOuterGainHF. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.EfxAuxiliarySendFilterGainAuto">
            <summary>(EFX Extension) If this Source property is set to True, the intensity of this Source’s reflected sound is automatically attenuated according to source-listener distance and source directivity (as determined by the cone parameters). If it is False, the reflected sound is not attenuated according to distance and directivity. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceb.EfxAuxiliarySendFilterGainHighFrequencyAuto">
            <summary>(EFX Extension) If this Source property is AL_TRUE (its default value), the intensity of this Source’s reflected sound at high frequencies will be automatically attenuated according to the high-frequency source directivity as set by the Sourcef.ConeOuterGainHF property. If this property is AL_FALSE, the Source’s reflected sound is not filtered at all according to the Source’s directivity. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourcei">
            <summary>A list of valid Int32 Source parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.ByteOffset">
            <summary>The playback position, expressed in bytes.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.SampleOffset">
            <summary>The playback position, expressed in samples.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.Buffer">
            <summary>Indicate the Buffer to provide sound samples. Type: uint Range: any valid Buffer Handle.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.SourceType">
            <summary>Source type (Static, Streaming or undetermined). Use enum AlSourceType for comparison</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourcei.EfxDirectFilter">
            <summary>(EFX Extension) This Source property is used to apply filtering on the direct-path (dry signal) of a Source.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSource3i">
            <summary>A list of valid 3x Int32 Source/GetSource parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3i.Position">
            <summary>Specify the current location in three dimensional space. OpenAL, like OpenGL, uses a right handed coordinate system, where in a frontal default view X (thumb) points right, Y points up (index finger), and Z points towards the viewer/camera (middle finger). To switch from a left handed coordinate system, flip the sign on the Z coordinate. Listener position is always in the world coordinate system.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3i.Velocity">
            <summary>Specify the current velocity in three dimensional space.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSource3i.Direction">
            <summary>Specify the current direction vector.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetSourcei">
            <summary>A list of valid Int32 GetSource parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.ByteOffset">
            <summary>The playback position, expressed in bytes. AL_EXT_OFFSET Extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.SampleOffset">
            <summary>The playback position, expressed in samples. AL_EXT_OFFSET Extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.Buffer">
            <summary>Indicate the Buffer to provide sound samples. Type: uint Range: any valid Buffer Handle.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.SourceState">
            <summary>The state of the source (Stopped, Playing, etc.) Use the enum AlSourceState for comparison.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.BuffersQueued">
            <summary>The number of buffers queued on this source.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.BuffersProcessed">
            <summary>The number of buffers in the queue that have been processed.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetSourcei.SourceType">
            <summary>Source type (Static, Streaming or undetermined). Use enum AlSourceType for comparison.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourceState">
            <summary>Source state information, can be retrieved by AL.Source() with ALSourcei.SourceState.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceState.Initial">
            <summary>Default State when loaded, can be manually set with AL.SourceRewind().</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceState.Playing">
            <summary>The source is currently playing.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceState.Paused">
            <summary>The source has paused playback.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceState.Stopped">
            <summary>The source is not playing.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALSourceType">
            <summary>Source type information,  can be retrieved by AL.Source() with ALSourcei.SourceType.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceType.Static">
            <summary>Source is Static if a Buffer has been attached using AL.Source with the parameter Sourcei.Buffer.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceType.Streaming">
            <summary>Source is Streaming if one or more Buffers have been attached using AL.SourceQueueBuffers</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALSourceType.Undetermined">
            <summary>Source is undetermined when it has a null Buffer attached</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALFormat">
            <summary>Sound samples: Format specifier.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Mono8">
            <summary>1 Channel, 8 bits per sample.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Mono16">
            <summary>1 Channel, 16 bits per sample.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Stereo8">
            <summary>2 Channels, 8 bits per sample each.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Stereo16">
            <summary>2 Channels, 16 bits per sample each.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoALawExt">
            <summary>1 Channel, A-law encoded data. Requires Extension: AL_EXT_ALAW</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoALawExt">
            <summary>2 Channels, A-law encoded data. Requires Extension: AL_EXT_ALAW</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoMuLawExt">
            <summary>1 Channel, µ-law encoded data. Requires Extension: AL_EXT_MULAW</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoMuLawExt">
            <summary>2 Channels, µ-law encoded data. Requires Extension: AL_EXT_MULAW</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.VorbisExt">
            <summary>Ogg Vorbis encoded data. Requires Extension: AL_EXT_vorbis</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Mp3Ext">
            <summary>MP3 encoded data. Requires Extension: AL_EXT_mp3</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoIma4Ext">
            <summary>1 Channel, IMA4 ADPCM encoded data. Requires Extension: AL_EXT_IMA4</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoIma4Ext">
            <summary>2 Channels, IMA4 ADPCM encoded data. Requires Extension: AL_EXT_IMA4</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoFloat32Ext">
            <summary>1 Channel, single-precision floating-point data. Requires Extension: AL_EXT_float32</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoFloat32Ext">
            <summary>2 Channels, single-precision floating-point data. Requires Extension: AL_EXT_float32</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MonoDoubleExt">
            <summary>1 Channel, double-precision floating-point data. Requires Extension: AL_EXT_double</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.StereoDoubleExt">
            <summary>2 Channels, double-precision floating-point data. Requires Extension: AL_EXT_double</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi51Chn16Ext">
            <summary>Multichannel 5.1, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi51Chn32Ext">
            <summary>Multichannel 5.1, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi51Chn8Ext">
            <summary>Multichannel 5.1, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi61Chn16Ext">
            <summary>Multichannel 6.1, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi61Chn32Ext">
            <summary>Multichannel 6.1, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi61Chn8Ext">
            <summary>Multichannel 6.1, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi71Chn16Ext">
            <summary>Multichannel 7.1, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi71Chn32Ext">
            <summary>Multichannel 7.1, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.Multi71Chn8Ext">
            <summary>Multichannel 7.1, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiQuad16Ext">
            <summary>Multichannel 4.0, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiQuad32Ext">
            <summary>Multichannel 4.0, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiQuad8Ext">
            <summary>Multichannel 4.0, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiRear16Ext">
            <summary>1 Channel rear speaker, 16-bit data. See Quadrophonic setups. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiRear32Ext">
            <summary>1 Channel rear speaker, 32-bit data. See Quadrophonic setups. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALFormat.MultiRear8Ext">
            <summary>1 Channel rear speaker, 8-bit data. See Quadrophonic setups. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetBufferi">
            <summary>A list of valid Int32 GetBuffer parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetBufferi.Frequency">
            <summary>Sound sample's frequency, in units of hertz [Hz]. This is the number of samples per second. Half of the sample frequency marks the maximum significant frequency component.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetBufferi.Bits">
            <summary>Bit depth of the buffer. Should be 8 or 16.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetBufferi.Channels">
            <summary>Number of channels in buffer. > 1 is valid, but buffer won’t be positioned when played. 1 for Mono, 2 for Stereo.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetBufferi.Size">
            <summary>size of the Buffer in bytes.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALBufferState">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALBufferState.Unused">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALBufferState.Pending">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALBufferState.Processed">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALError">
            <summary>Returned by AL.GetError.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.NoError">
            <summary>No OpenAL Error.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.InvalidName">
            <summary>Invalid Name paramater passed to OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.IllegalEnum">
            <summary>Invalid parameter passed to OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.InvalidEnum">
            <summary>Invalid parameter passed to OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.InvalidValue">
            <summary>Invalid OpenAL enum parameter value.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.IllegalCommand">
            <summary>Illegal OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.InvalidOperation">
            <summary>Illegal OpenAL call.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALError.OutOfMemory">
            <summary>No OpenAL memory left.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetString">
            <summary>A list of valid string AL.Get() parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetString.Vendor">
            <summary>Gets the Vendor name.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetString.Version">
            <summary>Gets the driver version.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetString.Renderer">
            <summary>Gets the renderer mode.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetString.Extensions">
            <summary>Gets a list of all available Extensions, separated with spaces.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetFloat">
            <summary>A list of valid 32-bit Float AL.Get() parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetFloat.DopplerFactor">
            <summary>Doppler scale. Default 1.0f</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetFloat.DopplerVelocity">
            <summary>Tweaks speed of propagation. This functionality is deprecated.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetFloat.SpeedOfSound">
            <summary>Speed of Sound in units per second. Default: 343.3f</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALGetInteger">
            <summary>A list of valid Int32 AL.Get() parameters.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALGetInteger.DistanceModel">
            <summary>See enum ALDistanceModel.</summary><see cref="T:OpenTK.Audio.OpenAL.ALDistanceModel"/>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALDistanceModel">
            <summary>Used by AL.DistanceModel(), the distance model can be retrieved by AL.Get() with ALGetInteger.DistanceModel.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.None">
            <summary>Bypasses all distance attenuation calculation for all Sources.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.InverseDistance">
            <summary>InverseDistance is equivalent to the IASIG I3DL2 model with the exception that ALSourcef.ReferenceDistance does not imply any clamping.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.InverseDistanceClamped">
            <summary>InverseDistanceClamped is the IASIG I3DL2 model, with ALSourcef.ReferenceDistance indicating both the reference distance and the distance below which gain will be clamped.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.LinearDistance">
            <summary>AL_EXT_LINEAR_DISTANCE extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.LinearDistanceClamped">
            <summary>AL_EXT_LINEAR_DISTANCE extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.ExponentDistance">
            <summary>AL_EXT_EXPONENT_DISTANCE extension.</summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.ALDistanceModel.ExponentDistanceClamped">
            <summary>AL_EXT_EXPONENT_DISTANCE extension.</summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX">
            <summary>
            Exposes the functions of the Effects Extension.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.ExtensionName">
            <summary>
            The EFX extension name.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Checks if this extension is present.
            </summary>
            <param name="device">The device to query.</param>
            <returns>Whether the extension was present or not.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextInteger,System.Int32,System.Int32*)">
            <summary>
            Gets a vector of integer properties from the context.
            </summary>
            <param name="device">The audio device.</param>
            <param name="param">The named property.</param>
            <param name="size">The size of the provided buffer.</param>
            <param name="data">A pointer to the first element of a provided data buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextInteger,System.Int32,System.Int32@)">
            <summary>
            Gets a vector of integer properties from the context.
            </summary>
            <param name="device">The audio device.</param>
            <param name="param">The named property.</param>
            <param name="size">The size of the provided buffer.</param>
            <param name="data">A pointer to the first element of a provided data buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextInteger,System.Int32,System.Int32[])">
            <summary>
            Gets a vector of integer properties from the context.
            </summary>
            <param name="device">The audio device.</param>
            <param name="param">The named property.</param>
            <param name="size">The size of the provided buffer.</param>
            <param name="data">A pointer to the first element of a provided data buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextInteger,System.Int32[])">
            <summary>
            Gets a vector of integer properties from the context.
            </summary>
            <param name="device">The audio device.</param>
            <param name="param">The named property.</param>
            <param name="data">A provided data buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEFXMajorVersion(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Gets the major version of the Effect Extension.
            </summary>
            <param name="device">The device that the context is on.</param>
            <returns>The major version.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEFXMinorVersion(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Gets the minor version of the Effect Extension.
            </summary>
            <param name="device">The device that the context is on.</param>
            <returns>The minor version.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEFXVersion(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Gets the version of the Effect Extension.
            </summary>
            <param name="device">The device that the context is on.</param>
            <returns>The version.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)">
            <summary>
            Creates one or more auxiliary effect slots.
            </summary>
            <param name="count">The number of slots to create.</param>
            <param name="slots">The first element of the array to place the slots into.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)">
            <summary>
            Creates one or more auxiliary effect slots.
            </summary>
            <param name="count">The number of slots to create.</param>
            <param name="slots">The first element of the array to place the slots into.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])">
            <summary>
            Creates one or more auxiliary effect slots.
            </summary>
            <param name="count">The number of slots to create.</param>
            <param name="slots">The first element of the array to place the slots into.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)">
            <summary>
            Deletes and frees resources used for a set of auxiliary effect slots.
            </summary>
            <param name="count">The number of slots to delete.</param>
            <param name="slots">A pointer to the array of slots to delete.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)">
            <summary>
            Deletes and frees resources used for a set of auxiliary effect slots.
            </summary>
            <param name="count">The number of slots to delete.</param>
            <param name="slots">A pointer to the array of slots to delete.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])">
            <summary>
            Deletes and frees resources used for a set of auxiliary effect slots.
            </summary>
            <param name="count">The number of slots to delete.</param>
            <param name="slots">A pointer to the array of slots to delete.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)">
            <summary>
            Determines whether or not the given handle is an auxiliary slot handle.
            </summary>
            <param name="slot">The handle.</param>
            <returns>true if the handle is a slot handle; otherwise, false.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotInteger,System.Int32)">
            <summary>
            Sets the value of a named property on the given effect slot.
            </summary>
            <param name="slot">The slot.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotFloat,System.Single)">
            <summary>
            Sets the value of a named property on the given effect slot.
            </summary>
            <param name="slot">The slot.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotInteger,System.Int32*)">
            <summary>
            Gets the value of a named property on the given effect slot.
            </summary>
            <param name="slot">The slot.</param>
            <param name="param">The named property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotInteger,System.Int32@)">
            <summary>
            Gets the value of a named property on the given effect slot.
            </summary>
            <param name="slot">The slot.</param>
            <param name="param">The named property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotFloat,System.Single*)">
            <summary>
            Gets the value of a named property on the given effect slot.
            </summary>
            <param name="slot">The slot.</param>
            <param name="param">The named property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotFloat,System.Single@)">
            <summary>
            Gets the value of a named property on the given effect slot.
            </summary>
            <param name="slot">The slot.</param>
            <param name="param">The named property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32,System.Int32*)">
            <summary>
            Creates one or more effect objects.
            </summary>
            <param name="count">The number of objects to generate.</param>
            <param name="effects">A pointer to the first element of the array where the handles will be stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32,System.Int32*)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32,System.Int32@)">
            <summary>
            Creates one or more effect objects.
            </summary>
            <param name="count">The number of objects to generate.</param>
            <param name="effects">A pointer to the first element of the array where the handles will be stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32,System.Int32@)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32,System.Int32[])">
            <summary>
            Creates one or more effect objects.
            </summary>
            <param name="count">The number of objects to generate.</param>
            <param name="effects">A pointer to the first element of the array where the handles will be stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32,System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32,System.Int32*)">
            <summary>
            Deletes one or more effect objects, freeing their resources.
            </summary>
            <param name="count">The number of objects to delete.</param>
            <param name="effects">A pointer to the first element of the array where the handles are stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32,System.Int32*)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32,System.Int32@)">
            <summary>
            Deletes one or more effect objects, freeing their resources.
            </summary>
            <param name="count">The number of objects to delete.</param>
            <param name="effects">A pointer to the first element of the array where the handles are stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32,System.Int32@)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32,System.Int32[])">
            <summary>
            Deletes one or more effect objects, freeing their resources.
            </summary>
            <param name="count">The number of objects to delete.</param>
            <param name="effects">A pointer to the first element of the array where the handles are stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32,System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)">
            <summary>
            Determines whether or not a given handle is an effect handle.
            </summary>
            <param name="effect">The handle.</param>
            <returns>true if the handle is an effect handle; otherwise, false.</returns>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32[])"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger,System.Int32)">
            <summary>
            Sets the value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat,System.Single)">
            <summary>
            Sets the value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3,System.Single*)">
            <summary>
            Sets the vector value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3,System.Single@)">
            <summary>
            Sets the vector value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3,System.Single[])">
            <summary>
            Sets the vector value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger,System.Int32*)">
            <summary>
            Gets the value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger,System.Int32@)">
            <summary>
            Gets the value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat,System.Single*)">
            <summary>
            Gets the value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat,System.Single@)">
            <summary>
            Gets the value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3,System.Single*)">
            <summary>
            Gets the vector value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3,System.Single@)">
            <summary>
            Gets the vector value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32,System.Int32*)">
            <summary>
            Creates one or more filter objects.
            </summary>
            <param name="count">The number of objects to generate.</param>
            <param name="filters">A pointer to the first element of the array where the handles will be stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32,System.Int32*)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32,System.Int32@)">
            <summary>
            Creates one or more filter objects.
            </summary>
            <param name="count">The number of objects to generate.</param>
            <param name="filters">A pointer to the first element of the array where the handles will be stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32,System.Int32@)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32,System.Int32[])">
            <summary>
            Creates one or more filter objects.
            </summary>
            <param name="count">The number of objects to generate.</param>
            <param name="filters">A pointer to the first element of the array where the handles will be stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32,System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32,System.Int32*)">
            <summary>
            Deletes one or more filter objects, freeing their resources.
            </summary>
            <param name="count">The number of objects to delete.</param>
            <param name="filters">A pointer to the first element of the array where the handles are stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32,System.Int32*)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32,System.Int32@)">
            <summary>
            Deletes one or more filter objects, freeing their resources.
            </summary>
            <param name="count">The number of objects to delete.</param>
            <param name="filters">A pointer to the first element of the array where the handles are stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32,System.Int32@)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32,System.Int32[])">
            <summary>
            Deletes one or more filter objects, freeing their resources.
            </summary>
            <param name="count">The number of objects to delete.</param>
            <param name="filters">A pointer to the first element of the array where the handles are stored.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32,System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)">
            <summary>
            Determines whether or not a given handle is an filter handle.
            </summary>
            <param name="filter">The handle.</param>
            <returns>true if the handle is an filter handle; otherwise, false.</returns>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32[])"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Filter(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterInteger,System.Int32)">
            <summary>
            Sets the value of a named property on the given filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Filter(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat,System.Single)">
            <summary>
            Sets the value of a named property on the given filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterInteger,System.Int32*)">
            <summary>
            Gets the value of a named property on the given filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterInteger,System.Int32@)">
            <summary>
            Gets the value of a named property on the given filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat,System.Single*)">
            <summary>
            Gets the value of a named property on the given filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat,System.Single@)">
            <summary>
            Gets the value of a named property on the given filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger,System.Int32)">
            <summary>
            Sets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceFloat,System.Single)">
            <summary>
            Sets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceBoolean,System.Boolean)">
            <summary>
            Sets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3,System.Int32*)">
            <summary>
            Sets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3,System.Int32@)">
            <summary>
            Sets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3,System.Int32[])">
            <summary>
            Sets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value1">The first value to set the property to.</param>
            <param name="value2">The second value to set the property to.</param>
            <param name="value3">The third value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger,System.Int32*)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger,System.Int32@)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceFloat,System.Single*)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceFloat,System.Single@)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceBoolean,System.Boolean*)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceBoolean,System.Boolean@)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3,System.Int32*)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3,System.Int32@)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3,System.Int32[])">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3,System.Int32*,System.Int32*,System.Int32*)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value1">The first value to set the property to.</param>
            <param name="value2">The second value to set the property to.</param>
            <param name="value3">The third value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <param name="value1">The first value to set the property to.</param>
            <param name="value2">The second value to set the property to.</param>
            <param name="value3">The third value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Listener(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXListenerFloat,System.Single)">
            <summary>
            Sets the value of a named property on the given listener.
            </summary>
            <param name="listener">The listener.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXListenerFloat,System.Single*)">
            <summary>
            Gets the value of a named property on the given listener.
            </summary>
            <param name="listener">The listener.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXListenerFloat,System.Single@)">
            <summary>
            Gets the value of a named property on the given listener.
            </summary>
            <param name="listener">The listener.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlots(System.Int32[])">
            <summary>
            Creates one or more auxiliary effect slots.
            </summary>
            <param name="slots">An array to fill with created slots.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlots(System.Int32)">
            <summary>
            Creates one or more auxiliary effect slots.
            </summary>
            <param name="count">The number of slots to create.</param>
            <returns>The slots.</returns>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlot">
            <summary>
            Creates an auxiliary effect slot.
            </summary>
            <returns>The slot.</returns>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlot(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlot(System.Int32@)">
            <summary>
            Creates an auxiliary effect slot.
            </summary>
            <param name="slot">The generated slot.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlot(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])">
            <summary>
            Deletes and frees resources used for a set of auxiliary effect slots.
            </summary>
            <param name="slots">An array of slots to delete.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlots(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteAuxiliaryEffectSlot(System.Int32)">
            <summary>
            Deletes and frees resources used an auxiliary effect slot.
            </summary>
            <param name="slot">The slot to delete.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenAuxiliaryEffectSlot"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsAuxiliaryEffectSlot(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotInteger)">
            <summary>
            Gets the value of a named property on the given effect slot.
            </summary>
            <param name="slot">The slot.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotFloat)">
            <summary>
            Gets the value of a named property on the given effect slot.
            </summary>
            <param name="slot">The slot.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32[])">
            <summary>
            Creates one or more effects.
            </summary>
            <param name="effects">An arrays to fill with the generated effects.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32)">
            <summary>
            Creates one or more effects.
            </summary>
            <param name="count">The number of effects to create.</param>
            <returns>The effects.</returns>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffect">
            <summary>
            Creates an effect.
            </summary>
            <returns>The effect.</returns>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffect(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffect(System.Int32@)">
            <summary>
            Creates an effect.
            </summary>
            <param name="effect">The effect.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffect(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffects(System.Int32[])">
            <summary>
            Deletes and frees resources used for a set of effects.
            </summary>
            <param name="effects">An array of effects to delete.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffects(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteEffect(System.Int32)">
            <summary>
            Deletes and frees resources used an effect.
            </summary>
            <param name="effect">The effect to delete.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenEffect"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsEffect(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3,OpenTK.Mathematics.Vector3@)">
            <summary>
            Sets the vector value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat)">
            <summary>
            Gets the value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3,OpenTK.Mathematics.Vector3@)">
            <summary>
            Gets the vector value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3)">
            <summary>
            Gets the value of a named property on the given effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32[])">
            <summary>
            Creates one or more filters.
            </summary>
            <param name="filters">An array to fill with the generated filters.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32)">
            <summary>
            Creates one or more filters.
            </summary>
            <param name="count">The number of filters to create.</param>
            <returns>The filters.</returns>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32[])"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilter">
            <summary>
            Creates an filter.
            </summary>
            <returns>The filter.</returns>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilter(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilter(System.Int32@)">
            <summary>
            Creates an filter.
            </summary>
            <param name="filter">The filter.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilter(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilters(System.Int32[])">
            <summary>
            Deletes and frees resources used for a set of filters.
            </summary>
            <param name="filters">An array of filters to delete.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilters(System.Int32)"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.DeleteFilter(System.Int32)">
            <summary>
            Deletes and frees resources used an filter.
            </summary>
            <param name="filter">The filter to delete.</param>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GenFilter"/>
            <seealso cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.IsFilter(System.Int32)"/>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterInteger)">
            <summary>
            Gets the value of a named property on the given filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat)">
            <summary>
            Gets the value of a named property on the given filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceFloat)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceBoolean)">
            <summary>
            Gets the value of a named property on the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXListenerFloat)">
            <summary>
            Gets the value of a named property on the given listener.
            </summary>
            <param name="listener">The listener.</param>
            <param name="param">The named property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat">
            <summary>
            A list of valid 32-bit Float Effect/GetEffect parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbDensity">
            <summary>
            Reverb Modal Density controls the coloration of the late reverb. Lowering the value adds more coloration to
            the late reverb. Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbDiffusion">
            <summary>
            The Reverb Diffusion property controls the echo density in the reverberation decay. The default 1.0f provides
            the highest density. Reducing diffusion gives the reverberation a more "grainy" character that is especially
            noticeable with percussive sound sources. If you set a diffusion value of 0.0f, the later reverberation sounds like
            a succession of distinct echoes. Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbGain">
            <summary>
            The Reverb Gain property is the master volume control for the reflected sound - both early reflections and
            reverberation - that the reverb effect adds to all sound sources. Ranges from 1.0 (0db) (the maximum amount) to 0.0
            (-100db) (no reflected sound at all) are accepted. Units: Linear gain Range [0.0f .. 1.0f] Default: 0.32f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbGainHF">
            <summary>
            The Reverb Gain HF property further tweaks reflected sound by attenuating it at high frequencies. It controls
            a low-pass filter that applies globally to the reflected sound of all sound sources feeding the particular instance
            of the reverb effect. Ranges from 1.0f (0db) (no filter) to 0.0f (-100db) (virtually no reflected sound) are
            accepted. Units: Linear gain Range [0.0f .. 1.0f] Default: 0.89f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbDecayTime">
            <summary>
            The Decay Time property sets the reverberation decay time. It ranges from 0.1f (typically a small room with
            very dead surfaces) to 20.0 (typically a large room with very live surfaces). Unit: Seconds Range [0.1f .. 20.0f]
            Default: 1.49f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbDecayHFRatio">
            <summary>
            The Decay HF Ratio property sets the spectral quality of the Decay Time parameter. It is the ratio of
            high-frequency decay time relative to the time set by Decay Time.. Unit: linear multiplier Range [0.1f .. 2.0f]
            Default: 0.83f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbReflectionsGain">
            <summary>
            The Reflections Gain property controls the overall amount of initial reflections relative to the Gain
            property. The value of Reflections Gain ranges from a maximum of 3.16f (+10 dB) to a minimum of 0.0f (-100 dB) (no
            initial reflections at all), and is corrected by the value of the Gain property. Unit: Linear gain Range [0.0f ..
            3.16f] Default: 0.05f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbReflectionsDelay">
            <summary>
            The Reflections Delay property is the amount of delay between the arrival time of the direct path from the
            source to the first reflection from the source. It ranges from 0 to 300 milliseconds. Unit: Seconds Range [0.0f ..
            0.3f] Default: 0.007f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbLateReverbGain">
            <summary>
            The Late Reverb Gain property controls the overall amount of later reverberation relative to the Gain
            property. The value of Late Reverb Gain ranges from a maximum of 10.0f (+20 dB) to a minimum of 0.0f (-100 dB) (no
            late reverberation at all). Unit: Linear gain Range [0.0f .. 10.0f] Default: 1.26f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbLateReverbDelay">
            <summary>
            The Late Reverb Delay property defines the begin time of the late reverberation relative to the time of the
            initial reflection (the first of the early reflections). It ranges from 0 to 100 milliseconds. Unit: Seconds Range
            [0.0f .. 0.1f] Default: 0.011f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbAirAbsorptionGainHF">
            <summary>
            The Air Absorption Gain HF property controls the distance-dependent attenuation at high frequencies caused by
            the propagation medium and applies to reflected sound only. Unit: Linear gain per meter Range [0.892f .. 1.0f]
            Default: 0.994f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbRoomRolloffFactor">
            <summary>
            The Room Rolloff Factor property is one of two methods available to attenuate the reflected sound (containing
            both reflections and reverberation) according to source-listener distance. It's defined the same way as OpenAL's
            Rolloff Factor, but operates on reverb sound instead of direct-path sound. Unit: Linear multiplier Range [0.0f ..
            10.0f] Default: 0.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ChorusRate">
            <summary>
            This property sets the modulation rate of the low-frequency oscillator that controls the delay time of the
            delayed signals. Unit: Hz Range [0.0f .. 10.0f] Default: 1.1f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ChorusDepth">
            <summary>
            This property controls the amount by which the delay time is modulated by the low-frequency oscillator. Range
            [0.0f .. 1.0f] Default: 0.1f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ChorusFeedback">
            <summary>
            This property controls the amount of processed signal that is fed back to the input of the chorus effect.
            Negative values will reverse the phase of the feedback signal. At full magnitude the identical sample will repeat
            endlessly. Range [-1.0f .. +1.0f] Default: +0.25f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ChorusDelay">
            <summary>
            This property controls the average amount of time the sample is delayed before it is played back, and with
            feedback, the amount of time between iterations of the sample. Larger values lower the pitch. Unit: Seconds Range
            [0.0f .. 0.016f] Default: 0.016f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.DistortionEdge">
            <summary>
            This property controls the shape of the distortion. The higher the value for Edge, the "dirtier" and "fuzzier"
            the effect. Range [0.0f .. 1.0f] Default: 0.2f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.DistortionGain">
            <summary>
            This property allows you to attenuate the distorted sound. Range [0.01f .. 1.0f] Default: 0.05f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.DistortionLowpassCutoff">
            <summary>
            Input signals can have a low pass filter applied, to limit the amount of high frequency signal feeding into
            the distortion effect. Unit: Hz Range [80.0f .. 24000.0f] Default: 8000.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.DistortionEQCenter">
            <summary>
            This property controls the frequency at which the post-distortion attenuation (Distortion Gain) is active.
            Unit: Hz Range [80.0f .. 24000.0f] Default: 3600.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.DistortionEQBandwidth">
            <summary>
            This property controls the bandwidth of the post-distortion attenuation. Unit: Hz Range [80.0f .. 24000.0f]
            Default: 3600.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EchoDelay">
            <summary>
            This property controls the delay between the original sound and the first "tap", or echo instance.
            Subsequently, the value for Echo Delay is used to determine the time delay between each "second tap" and the next
            "first tap". Unit: Seconds Range [0.0f .. 0.207f] Default: 0.1f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EchoLRDelay">
            <summary>
            This property controls the delay between the "first tap" and the "second tap". Subsequently, the value for
            Echo LR Delay is used to determine the time delay between each "first tap" and the next "second tap". Unit: Seconds
            Range [0.0f .. 0.404f] Default: 0.1f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EchoDamping">
            <summary>
            This property controls the amount of high frequency damping applied to each echo. As the sound is subsequently
            fed back for further echoes, damping results in an echo which progressively gets softer in tone as well as
            intensity. Range [0.0f .. 0.99f] Default: 0.5f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EchoFeedback">
            <summary>
            This property controls the amount of feedback the output signal fed back into the input. Use this parameter to
            create "cascading" echoes. At full magnitude, the identical sample will repeat endlessly. Below full magnitude, the
            sample will repeat and fade. Range [0.0f .. 1.0f] Default: 0.5f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EchoSpread">
            <summary>
            This property controls how hard panned the individual echoes are. With a value of 1.0f, the first "tap" will
            be panned hard left, and the second "tap" hard right. –1.0f gives the opposite result and values near to 0.0f
            result in less emphasized panning. Range [-1.0f .. +1.0f] Default: -1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.FlangerRate">
            <summary>
            The number of times per second the low-frequency oscillator controlling the amount of delay repeats. Range
            [0.0f .. 10.0f] Default: 0.27f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.FlangerDepth">
            <summary>
            The ratio by which the delay time is modulated by the low-frequency oscillator. Range [0.0f .. 1.0f] Default:
            1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.FlangerFeedback">
            <summary>
            This is the amount of the output signal level fed back into the effect's input. A negative value will reverse
            the phase of the feedback signal. Range [-1.0f .. +1.0f] Default: -0.5f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.FlangerDelay">
            <summary>
            The average amount of time the sample is delayed before it is played back. When used with the Feedback
            property it's the amount of time between iterations of the sample. Unit: Seconds Range [0.0f .. 0.004f] Default:
            0.002f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.FrequencyShifterFrequency">
            <summary>
            This is the carrier frequency. For carrier frequencies below the audible range, the single sideband modulator
            may produce phaser effects, spatial effects or a slight pitch-shift. As the carrier frequency increases, the timbre
            of the sound is affected. Unit: Hz Range [0.0f .. 24000.0f] Default: 0.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.VocalMorpherRate">
            <summary>
            This controls the frequency of the low-frequency oscillator used to morph between the two phoneme filters.
            Unit: Hz Range [0.0f .. 10.0f] Default: 1.41f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.RingModulatorFrequency">
            <summary>
            This is the frequency of the carrier signal. If the carrier signal is slowly varying (less than 20 Hz), the
            result is a slow amplitude variation effect (tremolo). Unit: Hz Range [0.0f .. 8000.0f] Default: 440.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.RingModulatorHighpassCutoff">
            <summary>
            This controls the cutoff frequency at which the input signal is high-pass filtered before being ring
            modulated. Unit: Hz Range [0.0f .. 24000.0f] Default: 800.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.AutowahAttackTime">
            <summary>
            This property controls the time the filtering effect takes to sweep from minimum to maximum center frequency
            when it is triggered by input signal. Unit: Seconds Range [0.0001f .. 1.0f] Default: 0.06f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.AutowahReleaseTime">
            <summary>
            This property controls the time the filtering effect takes to sweep from maximum back to base center
            frequency, when the input signal ends. Unit: Seconds Range [0.0001f .. 1.0f] Default: 0.06f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.AutowahResonance">
            <summary>
            This property controls the resonant peak, sometimes known as emphasis or Q, of the auto-wah band-pass filter.
            Range [2.0f .. 1000.0f] Default: 1000.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.AutowahPeakGain">
            <summary>
            This property controls the input signal level at which the band-pass filter will be fully opened. Range
            [0.00003f .. 31621.0f] Default: 11.22f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerLowGain">
            <summary>
            This property controls amount of cut or boost on the low frequency range. Range [0.126f .. 7.943f] Default:
            1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerLowCutoff">
            <summary>
            This property controls the low frequency below which signal will be cut off. Unit: Hz Range [50.0f .. 800.0f]
            Default: 200.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerMid1Gain">
            <summary>
            This property allows you to cut/boost signal on the "mid1" range. Range [0.126f .. 7.943f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerMid1Center">
            <summary>
            This property sets the center frequency for the "mid1" range. Unit: Hz Range [200.0f .. 3000.0f] Default:
            500.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerMid1Width">
            <summary>
            This property controls the width of the "mid1" range. Range [0.01f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerMid2Gain">
            <summary>
            This property allows you to cut/boost signal on the "mid2" range. Range [0.126f .. 7.943f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerMid2Center">
            <summary>
            This property sets the center frequency for the "mid2" range. Unit: Hz Range [1000.0f .. 8000.0f] Default:
            3000.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerMid2Width">
            <summary>
            This property controls the width of the "mid2" range. Range [0.01f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerHighGain">
            <summary>
            This property allows to cut/boost the signal at high frequencies. Range [0.126f .. 7.943f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EqualizerHighCutoff">
            <summary>
            This property controls the high frequency above which signal will be cut off. Unit: Hz Range [4000.0f ..
            16000.0f] Default: 6000.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbDensity">
            <summary>
            Reverb Modal Density controls the coloration of the late reverb. Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbDiffusion">
            <summary>
            The Reverb Diffusion property controls the echo density in the reverberation decay. Range [0.0f .. 1.0f]
            Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbGain">
            <summary>
            Reverb Gain controls the level of the reverberant sound in an environment. A high level of reverb is
            characteristic of rooms with highly reflective walls and/or small dimensions. Unit: Linear gain Range [0.0f ..
            1.0f] Default: 0.32f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbGainHF">
            <summary>
            Gain HF is used to attenuate the high frequency content of all the reflected sound in an environment. You can
            use this property to give a room specific spectral characteristic. Unit: Linear gain Range [0.0f .. 1.0f] Default:
            0.89f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbGainLF">
            <summary>
            Gain LF is the low frequency counterpart to Gain HF. Use this to reduce or boost the low frequency content in
            an environment. Unit: Linear gain Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbDecayTime">
            <summary>
            The Decay Time property sets the reverberation decay time. It ranges from 0.1f (typically a small room with
            very dead surfaces) to 20.0f (typically a large room with very live surfaces). Unit: Seconds Range [0.1f .. 20.0f]
            Default: 1.49f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbDecayHFRatio">
            <summary>
            Decay HF Ratio scales the decay time of high frequencies relative to the value of the Decay Time property. By
            changing this value, you are changing the amount of time it takes for the high frequencies to decay compared to the
            mid frequencies of the reverb. Range [0.1f .. 2.0f] Default: 0.83f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbDecayLFRatio">
            <summary>
            Decay LF Ratio scales the decay time of low frequencies in the reverberation in the same manner that Decay HF
            Ratio handles high frequencies. Unit: Linear multiplier Range [0.1f .. 2.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbReflectionsGain">
            <summary>
            Reflections Gain sets the level of the early reflections in an environment. Early reflections are used as a
            cue for determining the size of the environment we are in. Unit: Linear gain Range [0.0f .. 3.16f] Default: 0.05f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbReflectionsDelay">
            <summary>
            Reflections Delay controls the amount of time it takes for the first reflected wave front to reach the
            listener, relative to the arrival of the direct-path sound. Unit: Seconds Range [0.0f .. 0.3f] Default: 0.007f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbLateReverbGain">
            <summary>
            The Late Reverb Gain property controls the overall amount of later reverberation relative to the Gain
            property. Range [0.0f .. 10.0f] Default: 1.26f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbLateReverbDelay">
            <summary>
            The Late Reverb Delay property defines the begin time of the late reverberation relative to the time of the
            initial reflection (the first of the early reflections). It ranges from 0 to 100 milliseconds. Unit: Seconds Range
            [0.0f .. 0.1f] Default: 0.011f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbEchoTime">
            <summary>
            Echo Time controls the rate at which the cyclic echo repeats itself along the reverberation decay. Range
            [0.075f .. 0.25f] Default: 0.25f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbEchoDepth">
            <summary>
            Echo Depth introduces a cyclic echo in the reverberation decay, which will be noticeable with transient or
            percussive sounds. Range [0.0f .. 1.0f] Default: 0.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbModulationTime">
            <summary>
            Modulation Time controls the speed of the rate of periodic changes in pitch (vibrato). Range [0.04f .. 4.0f]
            Default: 0.25f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbModulationDepth">
            <summary>
            Modulation Depth controls the amount of pitch change. Low values of Diffusion will contribute to reinforcing
            the perceived effect by reducing the mixing of overlapping reflections in the reverberation decay. Range [0.0f ..
            1.0f] Default: 0.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbAirAbsorptionGainHF">
            <summary>
            The Air Absorption Gain HF property controls the distance-dependent attenuation at high frequencies caused by
            the propagation medium. It applies to reflected sound only. Range [0.892f .. 1.0f] Default: 0.994f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbHFReference">
            <summary>
            The property HF reference determines the frequency at which the high-frequency effects created by Reverb
            properties are measured. Unit: Hz Range [1000.0f .. 20000.0f] Default: 5000.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbLFReference">
            <summary>
            The property LF reference determines the frequency at which the low-frequency effects created by Reverb
            properties are measured. Unit: Hz Range [20.0f .. 1000.0f] Default: 250.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbRoomRolloffFactor">
            <summary>
            The Room Rolloff Factor property is one of two methods available to attenuate the reflected sound (containing
            both reflections and reverberation) according to source-listener distance. It's defined the same way as OpenAL
            Rolloff Factor, but operates on reverb sound instead of direct-path sound. Range [0.0f .. 10.0f] Default: 0.0f
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger">
            <summary>
            A list of valid Int32 Effect/GetEffect parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.ChorusWaveform">
            <summary>
            This property sets the waveform shape of the low-frequency oscillator that controls the delay time of the
            delayed signals. Unit: (0) Sinusoid, (1) Triangle Range [0 .. 1] Default: 1
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.ChorusPhase">
            <summary>
            This property controls the phase difference between the left and right low-frequency oscillators. At zero
            degrees the two low-frequency oscillators are synchronized. Unit: Degrees Range [-180 .. 180] Default: 90
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.FlangerWaveform">
            <summary>
            Selects the shape of the low-frequency oscillator waveform that controls the amount of the delay of the
            sampled signal. Unit: (0) Sinusoid, (1) Triangle Range [0 .. 1] Default: 1
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.FlangerPhase">
            <summary>
            This changes the phase difference between the left and right low-frequency oscillator's. At zero degrees the
            two low-frequency oscillators are synchronized. Range [-180 .. +180] Default: 0
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.FrequencyShifterLeftDirection">
            <summary>
            These select which internal signals are added together to produce the output. Unit: (0) Down, (1) Up, (2) Off
            Range [0 .. 2] Default: 0
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.FrequencyShifterRightDirection">
            <summary>
            These select which internal signals are added together to produce the output. Unit: (0) Down, (1) Up, (2) Off
            Range [0 .. 2] Default: 0
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.VocalMorpherPhonemeA">
            <summary>
            Sets the vocal morpher 4-band formant filter A, used to impose vocal tract effects upon the input signal. The
            vocal morpher is not necessarily intended for use on voice signals; it is primarily intended for pitched noise
            effects, vocal-like wind effects, etc. Unit: Use enum EfxFormantFilterSettings Range [0 .. 29] Default: 0, "Phoneme
            A"
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.VocalMorpherPhonemeACoarseTuning">
            <summary>
            This is used to adjust the pitch of phoneme filter A in 1-semitone increments. Unit: Semitones Range [-24 ..
            +24] Default: 0
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.VocalMorpherPhonemeB">
            <summary>
            Sets the vocal morpher 4-band formant filter B, used to impose vocal tract effects upon the input signal. The
            vocal morpher is not necessarily intended for use on voice signals; it is primarily intended for pitched noise
            effects, vocal-like wind effects, etc. Unit: Use enum EfxFormantFilterSettings Range [0 .. 29] Default: 10,
            "Phoneme ER"
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.VocalMorpherPhonemeBCoarseTuning">
            <summary>
            This is used to adjust the pitch of phoneme filter B in 1-semitone increments. Unit: Semitones Range [-24 ..
            +24] Default: 0
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.VocalMorpherWaveform">
            <summary>
            This controls the shape of the low-frequency oscillator used to morph between the two phoneme filters. Unit:
            (0) Sinusoid, (1) Triangle, (2) Sawtooth Range [0 .. 2] Default: 0
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.PitchShifterCoarseTune">
            <summary>
            This sets the number of semitones by which the pitch is shifted. There are 12 semitones per octave. Unit:
            Semitones Range [-12 .. +12] Default: +12
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.PitchShifterFineTune">
            <summary>
            This sets the number of cents between Semitones a pitch is shifted. A Cent is 1/100th of a Semitone. Unit:
            Cents Range [-50 .. +50] Default: 0
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.RingModulatorWaveform">
            <summary>
            This controls which waveform is used as the carrier signal. Traditional ring modulator and tremolo effects
            generally use a sinusoidal carrier. Unit: (0) Sinusoid, (1) Sawtooth, (2) Square Range [0 .. 2] Default: 0
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.CompressorOnoff">
            <summary>
            Enabling this will result in audio exhibiting smaller variation in intensity between the loudest and quietest
            portions. Unit: (0) Off, (1) On Range [0 .. 1] Default: 1
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.ReverbDecayHFLimit">
            <summary>
            When this flag is set, the high-frequency decay time automatically stays below a limit value that's derived
            from the setting of the property Air Absorption HF. Unit: (0) False, (1) True Range [False, True] Default: True
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.EaxReverbDecayHFLimit">
            <summary>
            When this flag is set, the high-frequency decay time automatically stays below a limit value that's derived
            from the setting of the property AirAbsorptionGainHF. Unit: (0) False, (1) True Range [False, True] Default: True
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.EffectType">
            <summary>
            Used with the enum EfxEffectType as it's parameter.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotFloat">
            <summary>
            A list of valid <see cref="T:System.Single"/> AuxiliaryEffectSlot/GetAuxiliaryEffectSlot parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotFloat.Gain">
             <summary>
             Range [0.0f .. 1.0f]
             Default: 1.0f
            
             This property is used to specify an output level for the Auxiliary Effect Slot. Setting the gain to 0.0f mutes
             the output.
             </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotInteger">
            <summary>
            A list of valid <see cref="T:System.Int32"/> AuxiliaryEffectSlot/GetAuxiliaryEffectSlot parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotInteger.Effect">
            <summary>
            This property is used to attach an Effect object to the Auxiliary Effect Slot object. After the attachment,
            the Auxiliary Effect Slot object will contain the effect type and have the same effect parameters that were
            stored in the Effect object. Any Sources feeding the Auxiliary Effect Slot will immediate feed the new
            effect type and new effect parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectSlotInteger.AuxiliarySendAuto">
            <summary>
            This property is used to enable or disable automatic send adjustments based on the physical positions of the
            sources and the listener. This property should be enabled when an application wishes to use a reverb effect
            to simulate the environment surrounding a listener or a collection of Sources.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType">
            <summary>
            Effect type definitions to be used with EfxEffecti.EffectType.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.Null">
            <summary>
            No Effect, disable. This Effect type is used when an Effect object is initially created.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.Reverb">
            <summary>
            The Reverb effect is the standard Effects Extension's environmental reverberation effect. It is available on
            all Generic Software and Generic Hardware devices.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.Chorus">
            <summary>
            The Chorus effect essentially replays the input audio accompanied by another slightly delayed version of the
            signal, creating a "doubling" effect.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.Distortion">
            <summary>
            The Distortion effect simulates turning up (overdriving) the gain stage on a guitar amplifier or adding a
            distortion pedal to an instrument's output.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.Echo">
            <summary>
            The Echo effect generates discrete, delayed instances of the input signal.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.Flanger">
            <summary>
            The Flanger effect creates a "tearing" or "whooshing" sound, like a jet flying overhead.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.FrequencyShifter">
            <summary>
            The Frequency shifter is a single-sideband modulator, which translates all the component frequencies of the
            input signal by an equal amount.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.VocalMorpher">
            <summary>
            The Vocal morpher consists of a pair of 4-band formant filters, used to impose vocal tract effects upon the
            input signal.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.PitchShifter">
            <summary>
            The Pitch shifter applies time-invariant pitch shifting to the input signal, over a one octave range and
            controllable at a semi-tone and cent resolution.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.RingModulator">
            <summary>
            The Ring modulator multiplies an input signal by a carrier signal in the time domain, resulting in tremolo or
            inharmonic effects.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.Autowah">
            <summary>
            The Auto-wah effect emulates the sound of a wah-wah pedal used with an electric guitar, or a mute on a brass
            instrument.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.Compressor">
            <summary>
            The Compressor will boost quieter portions of the audio, while louder portions will stay the same or may even
            be reduced.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.Equalizer">
            <summary>
            The Equalizer is very flexible, providing tonal control over four different adjustable frequency ranges.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectType.EaxReverb">
            <summary>
            The EAX Reverb has a more advanced parameter set than EfxEffectType.Reverb, but is only natively supported on
            devices that support the EAX 3.0 or above.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3">
            <summary>
            A list of valid Math.Vector3 Effect/GetEffect parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3.EaxReverbLateReverbPan">
            <summary>
            Reverb Pan does for the Reverb what Reflections Pan does for the Reflections. Unit: Vector3 of length 0f to 1f
            Default: {0.0f, 0.0f, 0.0f}
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3.EaxReverbReflectionsPan">
            <summary>
            This Vector3 controls the spatial distribution of the cluster of early reflections. The direction of this
            vector controls the global direction of the reflections, while its magnitude controls how focused the reflections
            are towards this direction. For legacy reasons this Vector3 follows a left-handed co-ordinate system! Note that
            OpenAL uses a right-handed coordinate system. Unit: Vector3 of length 0f to 1f Default: {0.0f, 0.0f, 0.0f}
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextAttributes">
            <summary>
            Defines new context attributes.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextAttributes.MaxAuxiliarySends">
             <summary>
             Default: 2
            
             This Context property can be passed to OpenAL during Context creation (alcCreateContext) to
             request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired
             number of sends will be available, so an application should query this property after creating the context
             using alcGetIntergerv.
             </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextInteger">
            <summary>
            Defines new integer properties on the OpenAL context.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextInteger.EFXMajorVersion">
            <summary>
            This property can be used by the application to retrieve the Major version number of the
            Effects Extension supported by this OpenAL implementation. As this is a Context property is should be
            retrieved using alcGetIntegerv.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextInteger.EFXMinorVersion">
            <summary>
            This property can be used by the application to retrieve the Minor version number of the
            Effects Extension supported by this OpenAL implementation. As this is a Context property is should be
            retrieved using alcGetIntegerv.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXContextInteger.MaxAuxiliarySends">
             <summary>
             Default: 2
            
             This Context property can be passed to OpenAL during Context creation (alcCreateContext) to
             request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired
             number of sends will be available, so an application should query this property after creating the context
             using alcGetIntergerv.
             </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXListenerFloat">
            <summary>
            A list of valid <see cref="T:System.Single"/> Listener/GetListener parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXListenerFloat.EfxMetersPerUnit">
             <summary>
             centimeters 0.01f
             meters 1.0f
             kilometers 1000.0f
             Range [float.MinValue .. float.MaxValue]
             Default: 1.0f.
            
             This setting is critical if Air Absorption effects are enabled because the amount of Air
             Absorption applied is directly related to the real-world distance between the Source and the Listener.
             </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceBoolean">
            <summary>
            A list of valid <see cref="T:System.Boolean"/> Source/GetSource parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceBoolean.DirectFilterGainHighFrequencyAuto">
             <summary>
             Default: True
            
             If this Source property is set to True, this Source’s direct-path is automatically filtered
             according to the orientation of the source relative to the listener and the setting of the Source property
             Sourcef.ConeOuterGainHF.
             </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceBoolean.AuxiliarySendFilterGainAuto">
             <summary>
             Default: True
            
             If this Source property is set to True, the intensity of this Source’s reflected sound is
             automatically attenuated according to source-listener distance and source directivity (as determined by the cone
             parameters). If it is False, the reflected sound is not attenuated according to distance and directivity.
             </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceBoolean.AuxiliarySendFilterGainHighFrequencyAuto">
             <summary>
             Default: True
            
             If this Source property is AL_TRUE (its default value), the intensity of this Source’s
             reflected sound at high frequencies will be automatically attenuated according to the high-frequency source
             directivity as set by the Sourcef.ConeOuterGainHF property. If this property is AL_FALSE, the Source’s reflected
             sound is not filtered at all according to the Source’s directivity.
             </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceFloat">
            <summary>
            A list of valid <see cref="T:System.Single"/> Source/GetSource parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceFloat.AirAbsorptionFactor">
             <summary>
             Range [0.0f .. 10.0f]
             Default: 0.0f
            
             This property is a multiplier on the amount of Air Absorption applied to the Source. The
             AL_AIR_ABSORPTION_FACTOR is multiplied by an internal Air Absorption Gain HF value of 0.994 (-0.05dB) per meter
             which represents normal atmospheric humidity and temperature.
             </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceFloat.RoomRolloffFactor">
             <summary>
             Range [0.0f .. 10.0f]
             Default: 0.0f
            
             This property is defined the same way as the Reverb Room Rolloff property: it is one of two
             methods available in the Effect Extension to attenuate the reflected sound (early reflections and reverberation)
             according to source-listener distance.
             </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceFloat.ConeOuterGainHighFrequency">
             <summary>
             Range [0.0f .. 1.0f]
             Default: 1.0f
            
             A directed Source points in a specified direction. The Source sounds at full volume when the
             listener is directly in front of the source; it is attenuated as the listener circles the Source away from the
             front.
             </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger">
            <summary>
            A list of valid <see cref="T:System.Int32"/> Source/GetSource parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger.DirectFilter">
            <summary>
            This Source property is used to apply filtering on the direct-path (dry signal) of a Source.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3">
            <summary>
            A list of valid <see cref="T:System.Int32"/> Source/GetSource parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EFXSourceInteger3.AuxiliarySendFilter">
            <summary>
            This Source property is used to establish connections between Sources and Auxiliary Effect
            Slots. For a Source to feed an Effect that has been loaded into an Auxiliary Effect Slot the application must
            configure one of the Source’s auxiliary sends. This process involves setting 3 variables – the destination
            Auxiliary Effect Slot ID, the Auxiliary Send number, and an optional Filter ID.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat">
            <summary>
            A list of valid <see cref="T:System.Single"/> Filter/GetFilter parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat.LowpassGain">
            <summary>
            Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat.LowpassGainHF">
            <summary>
            Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat.HighpassGain">
            <summary>
            Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat.HighpassGainLF">
            <summary>
            Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat.BandpassGain">
            <summary>
            Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat.BandpassGainLF">
            <summary>
            Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterFloat.BandpassGainHF">
            <summary>
            Range [0.0f .. 1.0f] Default: 1.0f
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterInteger">
            <summary>
            A list of valid <see cref="T:System.Int32"/> Filter/GetFilter parameters.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterInteger.FilterType">
            <summary>
            Used with the enum EfxFilterType as Parameter to select a filter logic.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterType">
            <summary>
            Filter type definitions to be used with EfxFilteri.FilterType.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterType.Null">
            <summary>
            No Filter, disable. This Filter type is used when a Filter object is initially created.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterType.Lowpass">
            <summary>
            A low-pass filter is used to remove high frequency content from a signal.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterType.Highpass">
            <summary>
            Currently not implemented. A high-pass filter is used to remove low frequency content from a signal.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FilterType.Bandpass">
            <summary>
            Currently not implemented. A band-pass filter is used to remove high and low frequency content from a signal.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings">
            <summary>
            Vocal morpher effect parameters. If both parameters are set to the same phoneme, that determines the filtering
            effect that will be heard. If these two parameters are set to different phonemes, the filtering effect will morph
            between the two settings at a rate specified by EfxEffectf.VocalMorpherRate.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeA">
            <summary>
            The A phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeE">
            <summary>
            The E phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeI">
            <summary>
            The I phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeO">
            <summary>
            The O phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeU">
            <summary>
            The U phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeAA">
            <summary>
            The AA phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeAE">
            <summary>
            The AE phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeAH">
            <summary>
            The AH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeAO">
            <summary>
            The AO phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeEH">
            <summary>
            The EH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeER">
            <summary>
            The ER phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeIH">
            <summary>
            The IH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeIY">
            <summary>
            The IY phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeUH">
            <summary>
            The UH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeUW">
            <summary>
            The UW phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeB">
            <summary>
            The B phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeD">
            <summary>
            The D phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeF">
            <summary>
            The F phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeG">
            <summary>
            The G phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeJ">
            <summary>
            The J phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeK">
            <summary>
            The K phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeL">
            <summary>
            The L phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeM">
            <summary>
            The M phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeN">
            <summary>
            The N phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeP">
            <summary>
            The P phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeR">
            <summary>
            The R phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeS">
            <summary>
            The S phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeT">
            <summary>
            The T phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeV">
            <summary>
            The V phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.FormantFilterSettings.VocalMorpherPhonemeZ">
            <summary>
            The Z phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.MaxAuxiliarySends">
            <summary>
            May be passed at context construction time to indicate the number of desired auxiliary effect slot sends per
            source.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.MaxAuxiliarySends.UseDriverDefault">
            <summary>
            Will chose a reliably working parameter.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.MaxAuxiliarySends.One">
            <summary>
            One send per source.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.MaxAuxiliarySends.Two">
            <summary>
            Two sends per source.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.MaxAuxiliarySends.Three">
            <summary>
            Three sends per source.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.MaxAuxiliarySends.Four">
            <summary>
            Four sends per source.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets">
            <summary>
            A set of reverb presets that can be used with the extension.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Generic">
            <summary>
            A reverb preset (approximating a generic location).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PaddedCell">
            <summary>
            A reverb preset (approximating a padded cell).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Room">
            <summary>
            A reverb preset (approximating a room).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Bathroom">
            <summary>
            A reverb preset (approximating a bathroom).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.LivingRoom">
            <summary>
            A reverb preset (approximating a living room).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.StoneRoom">
            <summary>
            A reverb preset (approximating a stone room).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Auditorium">
            <summary>
            A reverb preset (approximating an auditorium).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.ConcertHall">
            <summary>
            A reverb preset (approximating a concert hall).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Cave">
            <summary>
            A reverb preset (approximating a cave).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Arena">
            <summary>
            A reverb preset (approximating an arena).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Hangar">
            <summary>
            A reverb preset (approximating a hangar).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CarpetedHallway">
            <summary>
            A reverb preset (approximating a carpeted hallway).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Hallway">
            <summary>
            A reverb preset (approximating a hallway).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.StoneCorridor">
            <summary>
            A reverb preset (approximating a stone corridor).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Alley">
            <summary>
            A reverb preset (approximating an alley).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Forest">
            <summary>
            A reverb preset (approximating a forest).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.City">
            <summary>
            A reverb preset (approximating a city).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Mountains">
            <summary>
            A reverb preset (approximating a mountain).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Quarry">
            <summary>
            A reverb preset (approximating a quarry).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Plain">
            <summary>
            A reverb preset (approximating a plain).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.ParkingLot">
            <summary>
            A reverb preset (approximating a parking lot).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Sewerpipe">
            <summary>
            A reverb preset (approximating a sewer pipe).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Underwater">
            <summary>
            A reverb preset (approximating an underwater location).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Drugged">
            <summary>
            A reverb preset (approximating a drugged state).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Dizzy">
            <summary>
            A reverb preset (approximating a dizzy state).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Psychotic">
            <summary>
            A reverb preset (approximating a psychotic state).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CastleSmallRoom">
            <summary>
            A reverb preset (approximating a small room in a castle).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CastleShortPassage">
            <summary>
            A reverb preset (approximating a short passage in a castle).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CastleMediumRoom">
            <summary>
            A reverb preset (approximating a medium room in a castle).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CastleLargeRoom">
            <summary>
            A reverb preset (approximating a large room in a castle).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CastleLongPassage">
            <summary>
            A reverb preset (approximating a long passage in a castle).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CastleHall">
            <summary>
            A reverb preset (approximating a hall in a castle).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CastleCupboard">
            <summary>
            A reverb preset (approximating a cupboard in a castle).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CastleCourtyard">
            <summary>
            A reverb preset (approximating a castle courtyard).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CastleAlcove">
            <summary>
            A reverb preset (approximating an alcove in a castle).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.FactorySmallRoom">
            <summary>
            A reverb preset (approximating a small room in a factory).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.FactoryShortPassage">
            <summary>
            A reverb preset (approximating a short passage in a factory).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.FactoryMediumRoom">
            <summary>
            A reverb preset (approximating a medium room in a factory).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.FactoryLargeRoom">
            <summary>
            A reverb preset (approximating a large room in a factory).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.FactoryLongPassage">
            <summary>
            A reverb preset (approximating a long passage in a factory).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.FactoryHall">
            <summary>
            A reverb preset (approximating a hall in a factory).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.FactoryCupboard">
            <summary>
            A reverb preset (approximating a cupboard in a factory).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.FactoryCourtyard">
            <summary>
            A reverb preset (approximating a factory courtyard).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.FactoryAlcove">
            <summary>
            A reverb preset (approximating an alcove in a factory).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.IcePalaceSmallRoom">
            <summary>
            A reverb preset (approximating a small room in an ice palace).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.IcePalaceShortPassage">
            <summary>
            A reverb preset (approximating a short passage in an ice palace).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.IcePalaceMediumRoom">
            <summary>
            A reverb preset (approximating a medium room in an ice palace).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.IcePalaceLargeRoom">
            <summary>
            A reverb preset (approximating a large room in an ice palace).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.IcePalaceLongPassage">
            <summary>
            A reverb preset (approximating a long passage in an ice palace).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.IcePalaceHall">
            <summary>
            A reverb preset (approximating a hall in an ice palace).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.IcePalaceCupboard">
            <summary>
            A reverb preset (approximating a cupboard in an ice palace).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.IcePalaceCourtyard">
            <summary>
            A reverb preset (approximating an ice palace courtyard).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.IcePalaceAlcove">
            <summary>
            A reverb preset (approximating an alcove in an ice palace).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SpaceStationSmallRoom">
            <summary>
            A reverb preset (approximating a small room in a space station).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SpaceStationShortPassage">
            <summary>
            A reverb preset (approximating a short passage in a space station).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SpaceStationMediumRoom">
            <summary>
            A reverb preset (approximating a medium room in a space station).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SpaceStationLargeRoom">
            <summary>
            A reverb preset (approximating a large room in a space station).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SpaceStationLongPassage">
            <summary>
            A reverb preset (approximating a long passage in a space station).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SpaceStationHall">
            <summary>
            A reverb preset (approximating a hall in a space station).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SpaceStationCupboard">
            <summary>
            A reverb preset (approximating a cupboard in a space station).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SpaceStationAlcove">
            <summary>
            A reverb preset (approximating an alcove in a space station).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.WoodenGalleonSmallRoom">
            <summary>
            A reverb preset (approximating a small room in a wooden galleon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.WoodenGalleonShortPassage">
            <summary>
            A reverb preset (approximating a short passage in a wooden galleon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.WoodenGalleonMediumRoom">
            <summary>
            A reverb preset (approximating a medium room in a wooden galleon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.WoodenGalleonLargeRoom">
            <summary>
            A reverb preset (approximating a large room in a wooden galleon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.WoodenGalleonLongPassage">
            <summary>
            A reverb preset (approximating a long passsage in a wooden galleon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.WoodenGalleonHall">
            <summary>
            A reverb preset (approximating a hall in a wooden galleon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.WoodenGalleonCupboard">
            <summary>
            A reverb preset (approximating a cupboard in a wooden galleon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.WoodenGalleonCourtyard">
            <summary>
            A reverb preset (approximating a courtyard on a wooden galleon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.WoodenGalleonAlcove">
            <summary>
            A reverb preset (approximating an alcove in a wooden galleon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SportEmptyStadium">
            <summary>
            A reverb preset (approximating an empty sports stadium).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SportSquashCourt">
            <summary>
            A reverb preset (approximating a squash court).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SportSmallSwimmingPool">
            <summary>
            A reverb preset (approximating a small swimming pool).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SportLargeSwimmingPool">
            <summary>
            A reverb preset (approximating a large swimming pool).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SportGymnasium">
            <summary>
            A reverb preset (approximating a gymnasium).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SportFullStadium">
            <summary>
            A reverb preset (approximating a full stadium).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SportStadiumTannoy">
            <summary>
            A reverb preset (approximating a tannoy stadium).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PrefabWorkshop">
            <summary>
            A reverb preset (approximating a workshop).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PrefabSchoolRoom">
            <summary>
            A reverb preset (approximating a school room).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PrefabPractiseRoom">
            <summary>
            A reverb preset (approximating a practise room).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PrefabOuthouse">
            <summary>
            A reverb preset (approximating an outhouse).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PrefabCaravan">
            <summary>
            A reverb preset (approximating a caravan).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DomeTomb">
            <summary>
            A reverb preset (approximating a dome in a tomb).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PipeSmall">
            <summary>
            A reverb preset (approximating a small pipe).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DomeSaintPauls">
            <summary>
            A reverb preset (approximating the dome in St. Paul's Cathedral, London).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PipeLongThin">
            <summary>
            A reverb preset (approximating a long, thin pipe).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PipeLarge">
            <summary>
            A reverb preset (approximating a large pipe).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.PipeResonant">
            <summary>
            A reverb preset (approximating a resonant pipe).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.OutdoorsBackyard">
            <summary>
            A reverb preset (approximating an outdoors backyard).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.OutdoorsRollingPlains">
            <summary>
            A reverb preset (approximating rolling plains).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.OutdoorsDeepCanyon">
            <summary>
            A reverb preset (approximating a deep canyon).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.OutdoorsCreek">
            <summary>
            A reverb preset (approximating a creek).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.OutdoorsValley">
            <summary>
            A reverb preset (approximating a valley).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.MoodHeaven">
            <summary>
            A reverb preset (approximating a heavenly mood).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.MoodHell">
            <summary>
            A reverb preset (approximating a hellish mood).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.MoodMemory">
            <summary>
            A reverb preset (approximating an abstract memory).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DrivingCommentator">
            <summary>
            A reverb preset (approximating a person in the commentator's seat).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DrivingPitGarage">
            <summary>
            A reverb preset (approximating a pit or garage).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DrivingInCarRacer">
            <summary>
            A reverb preset (approximating driving in a race car).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DrivingInCarSports">
            <summary>
            A reverb preset (approximating driving in a sports car).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DrivingInCarLuxury">
            <summary>
            A reverb preset (approximating driving in a luxury car).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DrivingFullGrandStand">
            <summary>
            A reverb preset (approximating driving on a course with a full grand stand).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DrivingEmptyGrandStand">
            <summary>
            A reverb preset (approximating an empty grand stand).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DrivingTunnel">
            <summary>
            A reverb preset (approximating driving in a tunnel).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CityStreets">
            <summary>
            A reverb preset (approximating city streets).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CitySubway">
            <summary>
            A reverb preset (approximating a subway).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CityMuseum">
            <summary>
            A reverb preset (approximating a museum).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CityLibrary">
            <summary>
            A reverb preset (approximating a library).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CityUnderpass">
            <summary>
            A reverb preset (approximating an underpass).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.CityAbandoned">
            <summary>
            A reverb preset (approximating an abandoned location).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.DustyRoom">
            <summary>
            A reverb preset (approximating a dusty room).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.Chapel">
            <summary>
            A reverb preset (approximating a chapel).
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbPresets.SmallWaterRoom">
            <summary>
            A reverb preset (approximating a small, water-filled room).
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties">
            <summary>
            Defines a set of predefined reverb properties.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.Density">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbDensity"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.Diffusion">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbDiffusion"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.Gain">
            <summary>
            Gets the preset value for <ReverbGainsee cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbGain"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.GainHF">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbGainHF"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.GainLF">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbGainLF"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.DecayTime">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbDecayTime"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.DecayHFRatio">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbDecayHFRatio"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.DecayLFRatio">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbDecayLFRatio"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ReflectionsGain">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbReflectionsGain"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ReflectionsDelay">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbReflectionsDelay"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ReflectionsPan">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3.EaxReverbReflectionsPan"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.LateReverbGain">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbLateReverbGain"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.LateReverbDelay">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbLateReverbDelay"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.LateReverbPan">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectVector3.EaxReverbLateReverbPan"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.EchoTime">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbEchoTime"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.EchoDepth">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbEchoDepth"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ModulationTime">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbModulationTime"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ModulationDepth">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbModulationDepth"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.AirAbsorptionGainHF">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbAirAbsorptionGainHF"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.HFReference">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbHFReference"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.LFReference">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.EaxReverbLFReference"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.RoomRolloffFactor">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectFloat.ReverbRoomRolloffFactor"/>.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.DecayHFLimit">
            <summary>
            Gets the preset value for <see cref="F:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.EffectInteger.ReverbDecayHFLimit"/>.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,OpenTK.Mathematics.Vector3,System.Single,System.Single,OpenTK.Mathematics.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties"/> struct.
            </summary>
            <param name="density">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.Density"/>.</param>
            <param name="diffusion">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.Diffusion"/>.</param>
            <param name="gain">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.Gain"/>.</param>
            <param name="gainHF">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.GainHF"/>.</param>
            <param name="gainLF">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.GainLF"/>.</param>
            <param name="decayTime">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.DecayTime"/>.</param>
            <param name="decayHFRatio">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.DecayHFRatio"/>.</param>
            <param name="decayLFRatio">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.DecayLFRatio"/>.</param>
            <param name="reflectionsGain">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ReflectionsGain"/>.</param>
            <param name="reflectionsDelay">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ReflectionsDelay"/>.</param>
            <param name="reflectionsPan">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ReflectionsPan"/>.</param>
            <param name="lateReverbGain">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.LateReverbGain"/>.</param>
            <param name="lateReverbDelay">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.LateReverbDelay"/>.</param>
            <param name="lateReverbPan">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.LateReverbPan"/>.</param>
            <param name="echoTime">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.EchoTime"/>.</param>
            <param name="echoDepth">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.EchoDepth"/>.</param>
            <param name="modulationTime">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ModulationTime"/>.</param>
            <param name="modulationDepth">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.ModulationDepth"/>.</param>
            <param name="airAbsorptionGainHF">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.AirAbsorptionGainHF"/>.</param>
            <param name="hfReference">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.HFReference"/>.</param>
            <param name="lfReference">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.LFReference"/>.</param>
            <param name="roomRolloffFactor">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.RoomRolloffFactor"/>.</param>
            <param name="decayHFLimit">See <see cref="P:OpenTK.Audio.OpenAL.Extensions.Creative.EFX.ReverbProperties.DecayHFLimit"/>.</param>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll">
            <summary>
            Exposes the API in the EnumerateAll extension.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll.ExtensionName">
            <summary>
            The name of this AL extension.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll.IsExtensionPresent">
            <summary>
            Checks whether the extension is present.
            </summary>
            <returns>Whether the extension was present or not.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Checks whether the extension is present.
            </summary>
            <param name="device">The device to be queried.</param>
            <returns>Whether the extension was present or not.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextString)">
            <summary>
            Gets a named property on the context.
            </summary>
            <param name="device">The device for the context.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll.GetStringList(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextStringList)">
            <summary>
            Gets a named property on the context.
            </summary>
            <param name="device">The device for the context.</param>
            <param name="param">The named property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll.GetStringList(OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextStringList)">
            <inheritdoc cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll.GetStringList(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextStringList)"/>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextString">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextString)" />.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextString.DefaultAllDevicesSpecifier">
            <summary>
            Gets the specifier for the default device.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextString.AllDevicesSpecifier">
            <summary>
            Gets the specifier of the first available device.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextStringList">
            <summary>
            Defines available parameters for <see cref="M:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.EnumerateAll.GetStringList(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextStringList)" />.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.Creative.EnumerateAll.GetEnumerateAllContextStringList.AllDevicesSpecifier">
            <summary>
            Gets the specifier strings for all available devices.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.EXT.Double.DoubleBufferFormat">
            <summary>
            Defines valid format specifiers for sound samples. This covers the additions from the multi-channel buffers extension.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.EXT.Double.DoubleBufferFormat.Mono">
            <summary>
            1 Channel, double-precision floating-point data.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.EXT.Double.DoubleBufferFormat.Stereo">
            <summary>
            2 Channels, double-precision floating-point data.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.EXT.Double.EXTDouble.ExtensionName">
            <summary>
            The name of this AL extension.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Double.EXTDouble.IsExtensionPresent">
            <summary>
            Checks if this extension is present.
            </summary>
            <returns>Whether the extension was present or not.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Double.EXTDouble.BufferData(System.Int32,OpenTK.Audio.OpenAL.Extensions.EXT.Double.DoubleBufferFormat,System.Double*,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: DoubleBufferFormat.Mono, DoubleBufferFormat.Stereo.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="bytes">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Double.EXTDouble.BufferData(System.Int32,OpenTK.Audio.OpenAL.Extensions.EXT.Double.DoubleBufferFormat,System.Double@,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: DoubleBufferFormat.Mono, DoubleBufferFormat.Stereo.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="bytes">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Double.EXTDouble.BufferData(System.Int32,OpenTK.Audio.OpenAL.Extensions.EXT.Double.DoubleBufferFormat,System.Double[],System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: DoubleBufferFormat.Mono, DoubleBufferFormat.Stereo.</param>
            <param name="buffer">The audio buffer.</param>
            <param name="freq">The frequency of the audio buffer.</param>
            FIXME: Should "size" be changed to "elements"?
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Double.EXTDouble.BufferData(System.Int32,OpenTK.Audio.OpenAL.Extensions.EXT.Double.DoubleBufferFormat,System.Span{System.Double},System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: DoubleBufferFormat.Mono, DoubleBufferFormat.Stereo.</param>
            <param name="buffer">Span representing the audio buffer.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.Extensions.EXT.FloatFormat.FloatBufferFormat">
            <summary>
            Defines valid format specifiers for sound samples. This covers the additions from the multi-channel buffers extension.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.EXT.FloatFormat.FloatBufferFormat.Mono">
            <summary>
            1 Channel, single-precision floating-point data.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.EXT.FloatFormat.FloatBufferFormat.Stereo">
            <summary>
            2 Channels, single-precision floating-point data.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.EXT.Float32.EXTFloat32.ExtensionName">
            <summary>
            The name of this AL extension.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Float32.EXTFloat32.IsExtensionPresent">
            <summary>
            Checks if this extension is present.
            </summary>
            <returns>Whether the extension was present or not.</returns>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Float32.EXTFloat32.BufferData(System.Int32,OpenTK.Audio.OpenAL.Extensions.EXT.FloatFormat.FloatBufferFormat,System.Single*,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: FloatBufferFormat.Mono, FloatBufferFormat.Stereo.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="bytes">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Float32.EXTFloat32.BufferData(System.Int32,OpenTK.Audio.OpenAL.Extensions.EXT.FloatFormat.FloatBufferFormat,System.Single@,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: FloatBufferFormat.Mono, FloatBufferFormat.Stereo.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="bytes">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Float32.EXTFloat32.BufferData(System.Int32,OpenTK.Audio.OpenAL.Extensions.EXT.FloatFormat.FloatBufferFormat,System.Single[],System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: FloatBufferFormat.Mono, FloatBufferFormat.Stereo.</param>
            <param name="buffer">The audio buffer.</param>
            <param name="freq">The frequency of the audio buffer.</param>
            FIXME: Should "size" be changed to "elements"?
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.EXT.Float32.EXTFloat32.BufferData(System.Int32,OpenTK.Audio.OpenAL.Extensions.EXT.FloatFormat.FloatBufferFormat,System.Span{System.Single},System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: FloatBufferFormat.Mono, FloatBufferFormat.Stereo.</param>
            <param name="buffer">Span representing the audio buffer.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.SOFT.DeviceClock.DeviceClock.ExtensionName">
            <summary>
            The name of this AL extension.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.SOFT.DeviceClock.DeviceClock.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)">
            <summary>
            Checks if this extension is present.
            </summary>
            <param name="device">The device to query.</param>
            <returns>Whether the extension was present or not.</returns>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.SOFT.DeviceClock.GetInteger64.DeviceClock">
            <summary>
            The audio device clock time, expressed
            in nanoseconds.
            NULL is an invalid device.
            ALC_DEVICE_CLOCK_SOFT
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.SOFT.DeviceClock.GetInteger64.DeviceLatency">
            <summary>
            The current audio device latency, in nanoseconds.
            This is effectively the delay for the samples rendered at the the device's current clock time from reaching the physical output.
            NULL is an invalid device.
            ALC_DEVICE_LATENCY_SOFT
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.SOFT.DeviceClock.GetInteger64.DeviceClockLatency">
            <summary>
            Expects a destination size of 2, and provides both the audio device clock time and latency, both in nanoseconds.
            The two values are measured atomically with respect to one another (i.e. the latency value was measured at the same time the device clock value was retrieved).
            NULL is an invalid device.
            ALC_DEVICE_CLOCK_LATENCY_SOFT
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.SOFT.DeviceClock.SourceDouble.SecOffsetClock">
            <summary>
            AL_SEC_OFFSET_LATENCY_SOFT
            <br/>
            The playback position, along with the device clock, both expressed in seconds.
            This attribute is read-only.
            <br/>
            The first value in the returned vector is the offset in seconds.
            The value is similar to that returned by <see cref="F:OpenTK.Audio.OpenAL.ALSourcef.SecOffset"/>, just with more precision.
            <br/>
            The second value is the device clock, in seconds.
            This updates at the same rate as the offset, and both are measured atomically with respect to one another.
            Be aware that this value may be subtly different from the other device clock queries due to the variable precision of floating-point values.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.SOFT.DeviceClock.SourceInteger64.SampleOffsetClock">
            <summary>
            AL_SAMPLE_OFFSET_CLOCK_SOFT
            <br/>
            The playback position, expressed in fixed-point samples, along with the device clock, expressed in nanoseconds.
            This attribute is read-only.
            <br/>
            The first value in the returned vector is the sample offset, which is a 32.32 fixed-point value.
            The whole number is stored in the upper 32 bits and the fractional component is in the lower 32 bits.
            The value is similar to that returned by <see cref="F:OpenTK.Audio.OpenAL.ALSourcei.SampleOffset"/>, just with more precision.
            <br/>
            The second value is the device clock, in nanoseconds.
            This updates at the same rate as the offset, and both are measured atomically with respect to one another.
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.SOFT.SourceLatency.SourceLatencyVector2i.SampleOffsetLatency">
            <summary>
            The playback position, expressed in fixed-point samples,
            along with the playback latency, expressed in nanoseconds (1/1000000000ths
            of a second). This attribute is read-only.
            AL_SAMPLE_OFFSET_LATENCY_SOFT
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.SOFT.SourceLatency.SourceLatencyVector2d.SecOffsetLatency">
            <summary>
            The playback position, along with the playback latency, both
            expressed in seconds. This attribute is read-only.
            AL_SEC_OFFSET_LATENCY_SOFT
            </summary>
        </member>
        <member name="F:OpenTK.Audio.OpenAL.Extensions.SOFT.SourceLatency.SourceLatency.ExtensionName">
            <summary>
            The name of this AL extension.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.Extensions.SOFT.SourceLatency.SourceLatency.IsExtensionPresent">
            <summary>
            Checks if this extension is present.
            </summary>
            <returns>Whether the extension was present or not.</returns>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALBase">
            <summary>
            This is a base class for OpenAL APIs that are using DllImport and want to resolve different dll names on different platforms.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver">
            <summary>
            This needs to be called before trying to use any OpenAL functions.
            This should be done in the static constructor of any class that DllImports OpenAL functions.
            </summary>
        </member>
        <member name="M:OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)">
            <summary>
            Calls alGetProcAddress and converts the resulting pointer into a delegate.
            </summary>
            <typeparam name="TDelegate">The delegate type to create.</typeparam>
            <param name="name">The name of the AL proc.</param>
            <returns>The created delegate.</returns>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.ALLoader">
            <summary>
            Provides a base for ApiContext so that it can register dll intercepts.
            </summary>
        </member>
        <member name="T:OpenTK.Audio.OpenAL.OpenALLibraryNameContainer">
            <summary>
            Contains the library name of OpenAL.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.OpenALLibraryNameContainer.Windows">
            <summary>
            Gets the library name to use on Windows.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.OpenALLibraryNameContainer.Linux">
            <summary>
            Gets the library name to use on Linux.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.OpenALLibraryNameContainer.MacOS">
            <summary>
            Gets the library name to use on MacOS.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.OpenALLibraryNameContainer.Android">
            <summary>
            Gets the library name to use on Android.
            </summary>
        </member>
        <member name="P:OpenTK.Audio.OpenAL.OpenALLibraryNameContainer.IOS">
            <summary>
            Gets the library name to use on iOS.
            </summary>
        </member>
        <member name="T:OpenTK.OpenAL.AlcVersion">
            <summary>
            Defines the known OpenAL versions.
            </summary>
        </member>
        <member name="F:OpenTK.OpenAL.AlcVersion.Alc10">
            <summary>
            OpenAL 1.0.
            </summary>
        </member>
        <member name="F:OpenTK.OpenAL.AlcVersion.Alc11">
            <summary>
            OpenAL 1.1.
            </summary>
        </member>
    </members>
</doc>
